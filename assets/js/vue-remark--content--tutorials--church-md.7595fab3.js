(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{"5U1w":function(t,s,a){"use strict";a.r(s);var n=a("KHd+"),e=a("UQSp"),r=a("Kw5r");function p(t){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}r.a.config.optionMergeStrategies;var o={VueRemarkRoot:e.a},c=function(t){var s=t.options.components=t.options.components||{},a=t.options.computed=t.options.computed||{};Object.keys(o).forEach((function(t){"object"===p(o[t])&&"function"==typeof o[t].render?s[t]=o[t]:a[t]=function(){return o[t]}}))},v=r.a.config.optionMergeStrategies,_="__vueRemarkFrontMatter",u={excerpt:null,title:"Church Numerals"};var l=function(t){t.options[_]&&(t.options[_]=u),r.a.util.defineReactive(t.options,_,u),t.options.computed=v.computed({$frontmatter:function(){return t.options[_]}},t.options.computed)},i=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("VueRemarkRoot",[a("h1",{attrs:{id:"church-numerals"}},[a("a",{attrs:{href:"#church-numerals","aria-hidden":"true"}},[t._v("#")]),t._v("Church Numerals")]),a("p",[t._v("In this implementation the natural numbers are represented by nested outputs.")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",{pre:!0,attrs:{class:"language-javascript"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("⟦0⟧")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" zero"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("⟦n⟧")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" succ"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" ⟦n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("⟧")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),a("p",[t._v("This allows for a relatively concise implementation of addition")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",{pre:!0,attrs:{class:"language-javascript"}},[t._v("⟦m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("n⟧")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zerom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zeron"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rtn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" rtn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zerom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zeron"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rtn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("⟦m⟧")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zerom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("⟦n⟧")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zeron"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),a("p",[t._v("where we avail ourselves of the contracts copy and add below. The implementation illustrates the use of namespaces to isolate processes from each other. If the interpretation of m and n are realized in the same namespace, that is, using the same zero and succ channels, then processes operating on them have to worry about mixing and interaction between the processes representing those numbers. More precisely, a process that interacts with both")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",{pre:!0,attrs:{class:"language-javascript"}},[t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("⟦m⟧")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" and "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("⟦n⟧")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),a("p",[t._v("needs to worry, potentially, about which process the communications on zero and succ originate from. If we have distinct names zerom, zeron, succm, succn, then we can effect an identification of the processes representing each number.")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",{pre:!0,attrs:{class:"language-javascript"}},[t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("⟦m⟧")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zerom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" and "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("⟦n⟧")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zeron"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),a("p",[t._v("That’s what the implementation of + does. It interprets each number into its own separate namespace, then it calls add which interacts with each process, pulling on each succi channel concurrently, until one or both of them reaches zeroi, copying the remainder from the source namespace into the result namespace, zero and succ, before piling on the succs from the original parameters to the interpretation of +, to at a time, account for the decrements of the simultaneous recursive descent.")]),a("p",[t._v("// copy moves a process representing a number in the namespace ")]),a("p",[t._v("// defined by zero1 and succ1 into a namespace defined by zero2 and succ2")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",{pre:!0,attrs:{class:"language-javascript"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zero1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succ1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zero2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succ2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rtn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    select "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" mo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("succ1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rtp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" rtp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" rtn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" succ2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zero1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succ1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("zero2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("succ2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rtp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" mo\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("zero1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("=>")]),t._v(" rtn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zero2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),a("p",[t._v("// add implements the arithmetic addition between numbers in different namespaces ")]),a("p",[t._v("// placing the resulting process in the namespace zeromn, succmn, on the channel rslt")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",{pre:!0,attrs:{class:"language-javascript"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zerom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  zeron"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zeromn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succmn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rslt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   select "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" mmo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" succm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" nmo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("succn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// both processes have more to say about succession")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rsltmt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n             "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" rsltmt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                rslt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" succmn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" succmn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we decremented by 2 in the join")]),t._v("\n             "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zerom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zeron"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zeromn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succmn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rsltmt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("mmo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nmo\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" mmo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" succm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" zn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("zeron")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n has run out of things to say about succession, but not m ")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rtn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" mmr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" rtn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                rslt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" succmn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rtn  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zerom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zeromn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succmn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rtn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("mmo\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" nmo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" succn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" zm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("zerom")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// m has run out of things to say about succession, but not n            ")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rtn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" nmr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" rtn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                rslt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" succmn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rtn  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zeron"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zeromn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" succmn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rtn "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nmo\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" zm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" zerom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" zn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("zeron")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// both processes have run out of things to say about succession")]),t._v("\n            rslt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" zeromn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),a("p",[t._v("Of course, this is not the only interpretation. There is a dual interpretation where successor is not realized as output, but as input. The reader is encouraged to investigate an implementation of this interpretation as it is equally instructive.")])])}),[],!1,null,null,null);"function"==typeof c&&c(i),"function"==typeof l&&l(i);s.default=i.exports},UQSp:function(t,s,a){"use strict";s.a={name:"VueRemarkRoot",render:function(t){return t("div",null,this.$slots.default)}}}}]);