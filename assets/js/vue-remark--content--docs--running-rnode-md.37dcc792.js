(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{UQSp:function(e,t,r){"use strict";t.a={name:"VueRemarkRoot",render:function(e){return e("div",null,this.$slots.default)}}},a53b:function(e,t,r){"use strict";r.r(t);var o=r("KHd+"),a=r("UQSp"),n=r("Kw5r");function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n.a.config.optionMergeStrategies;var i={VueRemarkRoot:a.a},p=function(e){var t=e.options.components=e.options.components||{},r=e.options.computed=e.options.computed||{};Object.keys(i).forEach((function(e){"object"===s(i[e])&&"function"==typeof i[e].render?t[e]=i[e]:r[e]=function(){return i[e]}}))},c=n.a.config.optionMergeStrategies,l="__vueRemarkFrontMatter",v={excerpt:null,title:"Running RNode (non-Docker)"};var d=function(e){e.options[l]&&(e.options[l]=v),n.a.util.defineReactive(e.options,l,v),e.options.computed=c.computed({$frontmatter:function(){return e.options[l]}},e.options.computed)},u=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("VueRemarkRoot",[r("h1",{attrs:{id:"running-rnode-non-docker"}},[r("a",{attrs:{href:"#running-rnode-non-docker","aria-hidden":"true"}},[e._v("#")]),e._v("Running RNode (non-Docker)")]),r("p",[e._v("These are the run commands to start an RNode Observer Node (read-only node). With this you are connecting to existing validator on mainnet.")]),r("h2",{attrs:{id:"to-connect-to-an-existing-network"}},[r("a",{attrs:{href:"#to-connect-to-an-existing-network","aria-hidden":"true"}},[e._v("#")]),e._v("To connect to an existing network")]),r("blockquote",[r("p",[e._v("Please fill in the "),r("code",{pre:!0},[e._v("<bootstrap ID>")]),e._v(". The current network ID is posted on "),r("a",{attrs:{href:"https://rchain.atlassian.net/wiki/spaces/CORE/pages/678756429/RChain+public+testnet+information",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("RChain public testnet information")]),e._v(".")])]),r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("rnode run --network-id "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("arg"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --shard-id "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("arg"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --bootstrap "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("arg"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --finalization-rate "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("arg"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --fault-tolerance-threshold "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("arg"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --synchrony-constraint-threshold "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("arg"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --fork-choice-stale-threshold "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("arg"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --fork-choice-check-if-stale-interval "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("arg"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --drop-peer-after-retries "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("arg"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --give-up-after-skipped "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("arg"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")])])]),r("ul",[r("li",[r("code",{pre:!0},[e._v("--network-id <arg>")]),e._v(" The network to run on (testnet , mainnet).")]),r("li",[r("code",{pre:!0},[e._v("--shard-id <arg>")]),e._v(" The network is splitted into shards for scaling.")]),r("li",[r("code",{pre:!0},[e._v("--bootstrap <arg>")]),e._v(" The bootstrap server for initial connection to the network.")]),r("li",[r("code",{pre:!0},[e._v("--finalization-rate <arg>")]),e._v(" Block finalization is triggered after adding every 'n' blocks. Use this option to configure this.")]),r("li",[r("code",{pre:!0},[e._v("--fault-tolerance-threshold <arg>")]),e._v(" Float value representing that the node tolerates up to fault-tolerance-threshold fraction of the total weight to equivocate.")]),r("li",[r("code",{pre:!0},[e._v("--synchrony-constraint-threshold <arg>")]),e._v("Float value representing that the node waits until at least synchrony-constraint-threshold fraction of the validators (by stake weight) proposed at least one block since is node's last proposal.")]),r("li",[r("code",{pre:!0},[e._v("--fork-choice-stale-threshold <arg>")]),e._v(" Node will request for fork choice tips if the latest FCT is more then ForkChoiceStaleThreshold old.")]),r("li",[r("code",{pre:!0},[e._v("--fork-choice-check-if-stale-interval <arg>")]),e._v(" Interval for check if fork choice tip is stale.")]),r("li",[r("code",{pre:!0},[e._v("--drop-peer-after-retries <arg>")]),e._v(" Fair round robin dispatcher drop inactive peer after round robin rounds. After giving up several times the peer gets dropped from the queue.")]),r("li",[r("code",{pre:!0},[e._v("--give-up-after-skipped <arg>")]),e._v(" Fair round robin dispatcher give up and try next peer after skipped packets. Skipped packets are buffered in other peers packet queues.")])]),r("p",[r("strong",[e._v("Examples:")])]),r("ul",[r("li",[e._v("run rnode")])]),r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("./rnode run --network-id mainnet --shard-id root --bootstrap "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"rnode://487e2c0c519b450b61253dea0a23b4d184a50089@node0.root-shard.mainnet.rchain.coop?protocol=40400&discovery=40404"')]),e._v(" --finalization-rate "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" --fault-tolerance-threshold -1 --synchrony-constraint-threshold "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" --fork-choice-stale-threshold 30minutes --fork-choice-check-if-stale-interval 30minutes --drop-peer-after-retries "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" --give-up-after-skipped "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")])])]),r("ul",[r("li",[e._v("help documentation")])]),r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("./rnode --help")])]),r("blockquote",[r("p",[e._v("if the message: "),r("code",{pre:!0},[e._v("- Waiting for first connection")]),e._v(" is there for more than 1 minute, please check your ports and ip: "),r("a",{attrs:{href:"/docs/network-configuration"}},[e._v("Network Configuration")])])])])}),[],!1,null,null,null);"function"==typeof p&&p(u),"function"==typeof d&&d(u);t.default=u.exports}}]);