(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{IVgf:function(t,a,e){"use strict";e.r(a);var s=e("KHd+"),n=e("UQSp"),r=e("Kw5r");function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}r.a.config.optionMergeStrategies;var p={VueRemarkRoot:n.a},c=function(t){var a=t.options.components=t.options.components||{},e=t.options.computed=t.options.computed||{};Object.keys(p).forEach((function(t){"object"===o(p[t])&&"function"==typeof p[t].render?a[t]=p[t]:e[t]=function(){return p[t]}}))},v=r.a.config.optionMergeStrategies,l="__vueRemarkFrontMatter",i={excerpt:null,title:"Design patterns"};var _=function(t){t.options[l]&&(t.options[l]=i),r.a.util.defineReactive(t.options,l,i),t.options.computed=v.computed({$frontmatter:function(){return t.options[l]}},t.options.computed)},u=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("VueRemarkRoot",[e("h1",{attrs:{id:"design-patterns"}},[e("a",{attrs:{href:"#design-patterns","aria-hidden":"true"}},[t._v("#")]),t._v("Design patterns")]),e("p",[t._v("Here you find some patterns you will often use to solve same Tasks.")]),e("h2",{attrs:{id:"mutable-state"}},[e("a",{attrs:{href:"#mutable-state","aria-hidden":"true"}},[t._v("#")]),t._v("Mutable state")]),e("pre",{pre:!0,attrs:{class:"language-javascript{numberLines:"}},[e("code",{pre:!0,attrs:{class:"language-javascript{numberLines:"}},[t._v("  new MakeCell in {\n    // Makes a single cell in which you can store values\n    contract MakeCell(@init, get, set) = {\n      new valueStore in {\n        valueStore!(init) |\n        contract get(ack) = {\n          for(@value <- valueStore) {\n            valueStore!(value) | ack!(value)\n          }\n        } |\n        contract set(@newValue, ack) = {\n          for(_ <- valueStore) {\n            valueStore!(newValue) | ack!(true)\n          }\n        }\n      }\n    } |\n    // Cell usage.\n    new myGet, mySet in {\n      MakeCell!(123, *myGet, *mySet) |\n      new ack in {\n        myGet!(*ack) |\n        for (@result <- ack) {\n          //result now contains the value 123\n          mySet!(456, *ack) |\n          for (_ <- ack) {\n            myGet!(*ack) |\n            for (@result <- ack) {\n              //result now contains the value 456\n              Nil\n            }\n          }\n        }\n      }\n    }\n  }")])]),e("p",[t._v("1.) We create a new channel MakeCell and then use it on lineas the name of an internal contract. No process other than the code inside this lexical scope can invoke it.")]),e("p",[t._v("3.) The "),e("em",[t._v("MakeCell")]),t._v(" contract takes three arguments. The first argument is the initial value to be stored in the cell. The second and third arguments are channels over which the cell will receive requests to get and set the value. Note that we want the first argument to be a process and the second and third to be names, but names are always received over channels so we need to make the first argument a pattern beginning with "),e("em",[t._v("@")]),t._v(" to indicate that the name we receive as the first argument is a quoted process and it is that process which we want to bind to the variable.")]),e("p",[t._v("4.) To store the value, we create a new channel. This channel will have at most one message on it containing the current value of the cell.")]),e("p",[t._v("5.) Before this line, there are no messages on the "),e("em",[t._v("valueStore")]),t._v(" channel. After we send the initial value, it is the only value on that channel.")]),e("p",[t._v("6.) We set up a contract to listen on the "),e("em",[t._v("get")]),t._v(" channel. Each time a message is sent on "),e("em",[t._v("get")]),t._v(", the body of the contract will be executed")]),e("p",[t._v("7.) We block until we get one message from the "),e("em",[t._v("valueStore")]),t._v(" channel. Because there is at most one message ever waiting on "),e("em",[t._v("valueStore")]),t._v(", reading the message behaves much like acquiring a lock.")]),e("p",[t._v("8.) We send the current value on "),e("em",[t._v("valueStore")]),t._v(" again, allowing other messages to be processed (i.e. releasing the lock), and we send the current value back to the client on the "),e("em",[t._v("ack")]),t._v(" channel.")]),e("p",[t._v("11.) Concurrently with the "),e("em",[t._v("get")]),t._v(" contract, we run a contract listening on "),e("em",[t._v("set")]),t._v(".")]),e("p",[t._v("12.) We block until there's a message on "),e("em",[t._v("valueStore")]),t._v(", then read it. We throw away the message that we read.")]),e("p",[t._v("13.) We send the new value to store on "),e("em",[t._v("valueStore")]),t._v(" and signal that the operation is complete.")]),e("p",[t._v("18-36) The usage code demonstrates creating a cell, assigning the initial value 123, getting that value, setting the value to 456, then getting that value.")]),e("p",[t._v("Note the deep layers of callback. Rholang was designed to make concurrent computations natural to express; as a consequence, data dependencies implicit in sequencing in other languages must be made explicit.")]),e("h2",{attrs:{id:"coat-check"}},[e("a",{attrs:{href:"#coat-check","aria-hidden":"true"}},[t._v("#")]),t._v("Coat check")]),e("pre",{pre:!0,attrs:{class:"language-javascript{numberLines:"}},[e("code",{pre:!0,attrs:{class:"language-javascript{numberLines:"}},[t._v('  new MakeCoatCheck in {\n    contract MakeCoatCheck(ret) = {\n      new port, table in {\n        ret!(*port) |\n        for(@"new", @arg, ack <= port) {\n          new ticket in {\n            ack!(*ticket) |\n            @{*ticket | *table}!(arg)\n          }\n        } |\n        for(@"get", @arg, ack <= port) {\n          for (@value <- @{arg | *table}) {\n            @{arg | *table}!(value) |\n            ack!(value)\n          }\n        } |\n        for(@"set", @arg1, @arg2, ack <= port) {\n          for (_ <- @{arg1 | *table}) {\n            @{arg1 | *table}!(arg2) |\n            ack!(true)\n          }\n        }\n      }\n    } |\n\n  // Usage\n  new ret, get, set in {\n    MakeCoatCheck!(*ret) |\n    for (cc <- ret) {\n      // Creates new cell with initial value 0\n      cc!("new", 0, *ret) |\n      for (ticket <- ret) {\n        contract get(return) = { cc!("get", *ticket, *return) } |\n        contract set(@value, return) = { cc!("set", *ticket, value, *return) } |\n\n        get!(*ret) | for(@r <- ret) {\n          //r is equal to 0\n          set!(1, *ret) | for(_ <- ret) {\n            get!(*ret) | for(@r <- ret) {\n              //r is equal to 1\n              Nil\n            }\n          }\n        }\n        }\n      }\n    }\n  }')])]),e("p",[t._v("2.) One design pattern, used in the MakeCell contract above, is to receive from the caller a channel for each different piece of functionality that a process provides. An object-oriented programmer might say that MakeCell requires the caller to provide a channel for each method. MakeCoatCheck uses a more object-oriented approach, as we'll see.")]),e("p",[t._v("3.) We create a "),e("em",[t._v("port")]),t._v(" channel for interacting with the coat check as well as a "),e("em",[t._v("table")]),t._v(" name which will be used in storing/retrieving values in the coat check.")]),e("p",[t._v("4.) We send "),e("em",[t._v("port")]),t._v(" out to the caller, so they can interact with the coat check.")]),e("p",[t._v("5, 11, 17) We define different methods which can be called by sending a message on "),e("em",[t._v("port")]),t._v(". This is done by specifying mutually exclusive patterns the message on "),e("em",[t._v("port")]),t._v(" can match, with the first element of the message being the method name and subsequent elements being the argument(s) and return channel. Using the "),e("em",[t._v("<=")]),t._v(" arrow instead of the "),e("em",[t._v("<-")]),t._v(" arrow means that the "),e("em",[t._v("for")]),t._v('s are "replicated". This gives them the same behavior as '),e("em",[t._v("contract")]),t._v("s, i.e. the process listening for messages on "),e("em",[t._v("port")]),t._v(" persists after spawning an instance of its body.")]),e("p",[t._v("8.) We take advantage of being able to quote any process to make a name in order to create a unique name for each value to be stored at. The process *"),e("em",[t._v("ticket | ")]),t._v("table"),e("em",[t._v(" is produced by the concurrent composition of the processes produced by unquoting the names ")]),t._v("ticket"),e("em",[t._v(" and ")]),t._v("table*. That process can then be quoted to form a unique name that is then used to store the value by sending it on the name.")]),e("h2",{attrs:{id:"dining-philosophers-and-deadlock"}},[e("a",{attrs:{href:"#dining-philosophers-and-deadlock","aria-hidden":"true"}},[t._v("#")]),t._v("Dining philosophers and deadlock")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("philosopher1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" philosopher2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" north"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" south"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" knife"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" spoon "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    north"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("knife"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    south"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("spoon"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@knf "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" north"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@spn "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" south"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      philosopher1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Complete!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n      north"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("knf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n      south"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@spn "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" south"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@knf "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" north"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      philosopher2"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Complete!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n      north"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("knf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n      south"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("spn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("p",[t._v("The dining philosophers problem has two philosophers that share only one set of silverware. Philosopher1 sits on the east side of the table while Philosopher2 sits on the west. Each needs both a knife and a spoon in order to eat. Each one refuses to relinquish a utensil until he has used both to take a bite. If both philosophers reach first for the utensil at their right, both will starve: Philosopher1 gets the knife, Philosopher2 gets the spoon, and neither ever lets go.")]),e("p",[t._v("Here's how to solve the problem:")]),e("pre",{pre:!0,attrs:{class:"language-javascript{numberLines:"}},[e("code",{pre:!0,attrs:{class:"language-javascript{numberLines:"}},[t._v('  new philosopher1, philosopher2, north, south, knife, spoon in {\n    north!(*knife) |\n    south!(*spoon) |\n    for (@knf <- north; @spn <- south) {\n      philosopher1!("Complete!") |\n      north!(knf) |\n      south!(spn)\n    } |\n    for (@spn <- south; @knf <- north) {\n      philosopher2!("Complete!") |\n      north!(knf) |\n      south!(spn)\n    }\n  }')])]),e("p",[t._v("4, 9) The join operator, denoted with a semicolon "),e("em",[t._v(";")]),t._v(", declares that the continuation should only proceed if there is a message available on each of the channels simultaneously, preventing the deadlock above.")]),e("h2",{attrs:{id:"crypto-channels"}},[e("a",{attrs:{href:"#crypto-channels","aria-hidden":"true"}},[t._v("#")]),t._v("Crypto channels")]),e("h3",{attrs:{id:"hashing"}},[e("a",{attrs:{href:"#hashing","aria-hidden":"true"}},[t._v("#")]),t._v("Hashing")]),e("p",[t._v("There are three hashing functions available:")]),e("ul",[e("li",[t._v("keccak256")]),e("li",[t._v("sha256")]),e("li",[t._v("blake2b256")])]),e("p",[t._v("Hashing functions are exposed as channels which expect two arguments:")]),e("ul",[e("li",[t._v("byte array to hash")]),e("li",[t._v("return channel for sending back the hash represented as byte array")])]),e("h3",{attrs:{id:"example-usage"}},[e("a",{attrs:{href:"#example-usage","aria-hidden":"true"}},[t._v("#")]),t._v("Example usage:")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("x")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("rho:io:stdout")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Joe"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" @"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (1)")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@r "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            @"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"keccak256Hash"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("toByteArray")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash the program from (1)")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@h "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The h here is the hash of the rholang term we sent to the hash channel.")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We can do anything we want with it, but we choose to just print it.")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Rholang prints byte arrays in hexadecimal.")]),t._v("\n            stdout"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print out the keccak256 hash")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("h3",{attrs:{id:"verify"}},[e("a",{attrs:{href:"#verify","aria-hidden":"true"}},[t._v("#")]),t._v("Verify")]),e("ol",[e("li",[t._v("Let's hash a rholang program and print out it in base16. In rholang:")])]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("x")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("rho:io:stdout")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Joe"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" @"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (1)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@r "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" @"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"keccak256Hash"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("toByteArray")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash the program from (1)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@h "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print out the keccak256 hash")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("p",[t._v("This will print the hash of our program "),e("em",[t._v("(1)")]),t._v(" :")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",{pre:!0,attrs:{class:"language-text"}},[t._v("`a6da46a1dc7ed715d4cd6472a736249a4d11142d160dbef9f20ae493de908c4e`")])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("We need a pair of keys; let's generate some with "),e("em",[t._v("Ed25519")]),t._v(", available in the project. In the scala console, we enter the following:")])]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"token keyword module"}},[t._v("import")]),t._v(" coop"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("rchain")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("crypto")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("signatures")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("_")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword module"}},[t._v("import")]),t._v(" coop"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("rchain")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("crypto")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("codec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("_")]),t._v("\n\nval keyPair "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("Ed25519")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("newKeyPair")]),t._v("\nval secKey "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("Base16")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("encode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keyPair"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("_1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// secKey: String = f6664a95992958bbfeb7e6f50bbca2aa7bfd015aec79820caf362a3c874e9247")]),t._v("\nval pubKey "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("Base16")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("encode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keyPair"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token property-access"}},[t._v("_2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pubKey: String = 288755c48c3951f89c5f0ffe885088dc0970fd935bc12adfdd81f81bb63d6219")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("Now we need to sign the hash we obtained in first step. First we convert the hexadecimal strings we printed earlier back into byte arrays, then sign the result:")])]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[t._v("val signature "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("Ed25519")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("sign")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("Base16")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("decode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a6da46a1dc7ed715d4cd6472a736249a4d11142d160dbef9f20ae493de908c4e"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("Base16")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("decode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secKey"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nval base16Repr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("Base16")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("encode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("signature"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d0a909078ce8b8706a641b07a0d4fe2108064813ce42009f108f89c2a3f4864aa1a510d6dfccad3b62cd610db0bfe82bcecb08d813997fa7df14972f56017e0b")])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("Now we can pass the signature and public key to our rholang program to verify it using the available crypto functions.")])]),e("p",[t._v("The "),e("em",[t._v("ed25519Verify")]),t._v(" channel expects four arguments as follows:")]),e("ul",[e("li",[t._v("data to verify. In our case, this will be the keccak256 hash of our rholang program. The hash is represented in base16, so we need to call "),e("em",[t._v("hexToBytes")]),t._v(" on it to turn the string into byte array")]),e("li",[t._v("signature. Again, we have hexadecimal string, so we need to turn it into a byte array with "),e("em",[t._v("hexToBytes")]),t._v(".")]),e("li",[t._v("public key. This is the public key corresponding to the private one used to issue the signature.")]),e("li",[t._v("channel on which the result of verification will be returned.")])]),e("p",[t._v("So, in rholang we run:")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("x")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("rho:io:stdout")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ed25519Verify"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a6da46a1dc7ed715d4cd6472a736249a4d11142d160dbef9f20ae493de908c4e"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("hexToBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"d0a909078ce8b8706a641b07a0d4fe2108064813ce42009f108f89c2a3f4864aa1a510d6dfccad3b62cd610db0bfe82bcecb08d813997fa7df14972f56017e0b"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("hexToBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"288755c48c3951f89c5f0ffe885088dc0970fd935bc12adfdd81f81bb63d6219"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("hexToBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@v "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("p",[t._v("and we should see:")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[t._v("@"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("p",[t._v("which means that our signed hash is verified.")]),e("p",[t._v("If we, for example, pass in a corrupted hash, changing the initial 'a' to a 'b':")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("x")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("stdout")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("rho:io:stdout")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     @"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ed25519Verify"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b6da46a1dc7ed615d4cd6472a736249a4d11142d160dbef9f20ae493de908c4e"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("hexToBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"d0a909078ce8b8706a641b07a0d4fe2108064813ce42009f108f89c2a3f4864aa1a510d6dfccad3b62cd610db0bfe82bcecb08d813997fa7df14972f56017e0b"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("hexToBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"288755c48c3951f89c5f0ffe885088dc0970fd935bc12adfdd81f81bb63d6219"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token method function property-access"}},[t._v("hexToBytes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@v "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("p",[t._v("we will get:")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[t._v("@"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("h2",{attrs:{id:"secure-design-patterns"}},[e("a",{attrs:{href:"#secure-design-patterns","aria-hidden":"true"}},[t._v("#")]),t._v("Secure design patterns")]),e("p",[t._v("In this section we describe several design patterns. These patterns are adapted from Marc Stiegler's "),e("a",{attrs:{href:"http://erights.org/talks/efun/SecurityPictureBook.pdf",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("A PictureBook of Secure Cooperation")]),t._v(".")]),e("h3",{attrs:{id:"facets"}},[e("a",{attrs:{href:"#facets","aria-hidden":"true"}},[t._v("#")]),t._v("Facets")]),e("p",[t._v("In the MakeCell contract, the client provides two channels, one for getting the value and one for setting it. If the client then passes only the "),e("em",[t._v("get")]),t._v(" channel to another process, that process effectively has a read-only view of the cell.")]),e("p",[t._v("Channels like "),e("em",[t._v("get")]),t._v(" and "),e("em",[t._v("set")]),t._v(' are called "facets" of the process. They encapsulate the authority to perform the action. If the '),e("em",[t._v("set")]),t._v(" channel is a public channel like "),e("em",[t._v('@"Foo"')]),t._v(", then anyone who can learn or even guess the string "),e("em",[t._v('"Foo"')]),t._v(" has the authority to set the cell's value. On the other hand, if the "),e("em",[t._v("set")]),t._v(" channel was created with the "),e("em",[t._v("new")]),t._v(" operator, then there's no way for any other process to construct the "),e("em",[t._v("set")]),t._v(" channel; it must be passed to a process directly in order for the process to use it.")]),e("p",[t._v("Note that possession of "),e("em",[t._v("get")]),t._v(" and "),e("em",[t._v("set")]),t._v(" is also authority to intercept messages sent to the cell:")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@ret "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("P")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@ret "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Q")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ack"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),e("p",[t._v("This term has two processes listening on the channel "),e("em",[t._v("get")]),t._v(" and a single message sent over "),e("em",[t._v("get")]),t._v(". Only one of the two processes will be able to receive the message.")]),e("p",[t._v("By receiving channels from the client for getting and setting, the MakeCell contract is leaving the decisions about how public those channels are to the client. The MakeCoatCheck contract, on the other hand, constructs its own channels and exposes methods the client, so it is in a position to enforce privacy guarantees.")]),e("h3",{attrs:{id:"attenuating-forwarders"}},[e("a",{attrs:{href:"#attenuating-forwarders","aria-hidden":"true"}},[t._v("#")]),t._v("Attenuating forwarders")]),e("p",[t._v("In the MakeCoatCheck contract, there's only one channel and messages are dispatched internally. To get the same effect as a read-only facet, we can create a forwarder process that simply ignores any messages it doesn't want to forward. The contract below only forwards the \"get\" method.")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MakeGetForwarder")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  contract "),e("span",{pre:!0,attrs:{class:"token function"}},[e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("MakeGetForwarder")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("port")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      ret"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("port"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n      contract "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@method"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" @arg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ack"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        match method "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter"}},[e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("=>")]),t._v(" target"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ack"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("h3",{attrs:{id:"revocation"}},[e("a",{attrs:{href:"#revocation","aria-hidden":"true"}},[t._v("#")]),t._v("Revocation")]),e("p",[t._v("We can implement revocation by creating a forwarder with a kill switch.")]),e("pre",{pre:!0,attrs:{class:"language-javascript{numberLines:"}},[e("code",{pre:!0,attrs:{class:"language-javascript{numberLines:"}},[t._v("  new MakeRevokableForwarder in {\n    contract MakeRevokableForwarder(target, ret) = {\n      new port, kill, forwardFlag in {\n        ret!(*port, *kill) |\n        forwardFlag!(true) |\n        contract port(msg) = {\n          for (@status <- forwardFlag) {\n            forwardFlag!(status) |\n            match status { true => target!(*msg) }\n          }\n        } |\n        for (_ <- kill; _ <- forwardFlag) {\n          forwardFlag!(false)\n        }\n      }\n    }\n  }")])]),e("p",[t._v("3.) We create a port to listen for method calls and a channel "),e("em",[t._v("forwardFlag")]),t._v(" to store whether to forward messages.")]),e("p",[t._v("4.) We return the channel on which clients send requests and the channel on which to send the kill signal.")]),e("p",[t._v("5.) We set the initial state of "),e("em",[t._v("forwardFlag")]),t._v(" to true.")]),e("p",[t._v("6-11) We read in an arbitrary message, get and replace the value of the flag. If the flag is true, we forward the message to "),e("em",[t._v("target")]),t._v(".")]),e("p",[t._v("12-14) If a message is ever sent on the "),e("em",[t._v("kill")]),t._v(" channel, we set "),e("em",[t._v("forwardFlag")]),t._v(" to false. The forwarder process then stops forwarding messages.")]),e("h3",{attrs:{id:"composition"}},[e("a",{attrs:{href:"#composition","aria-hidden":"true"}},[t._v("#")]),t._v("Composition")]),e("p",[t._v("By combining an attenuating forwarder with a revokable forwarder, we get both features:")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ret")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("MakeGetForwarder")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@pair "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    match pair "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("getOnly"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" kill"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("MakeRevokableForwarder")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getOnly"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("revokableGetOnly "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// give away revokableGetOnly instead of target")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hang onto kill for later revocation")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("h3",{attrs:{id:"logging-forwarder"}},[e("a",{attrs:{href:"#logging-forwarder","aria-hidden":"true"}},[t._v("#")]),t._v("Logging forwarder")]),e("p",[t._v("A logging forwarder can record all messages sent on a channel by echoing them to a second channel.")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[t._v("contract "),e("span",{pre:!0,attrs:{class:"token function"}},[e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("MakeLoggingForwarder")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" logger"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("port")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ret"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("port"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    contract "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      target"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n      logger"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("h3",{attrs:{id:"accountability"}},[e("a",{attrs:{href:"#accountability","aria-hidden":"true"}},[t._v("#")]),t._v("Accountability")]),e("p",[t._v("Suppose Alice has a channel and would like to log Bob's access to it. Bob would like to delegate the use of that channel to Carol and log her access. Each party is free to construct their own logging forwarder around the channel they have received. Alice will hold Bob responsible for whatever Carol does.")]),e("h3",{attrs:{id:"sealing-and-unsealing"}},[e("a",{attrs:{href:"#sealing-and-unsealing","aria-hidden":"true"}},[t._v("#")]),t._v("Sealing and unsealing")]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[t._v("contract "),e("span",{pre:!0,attrs:{class:"token function"}},[e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("MakeSealerUnsealer")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sealer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unsealer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ccRet "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ret"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sealer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("unsealer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token maybe-class-name"}},[t._v("MakeCoatCheck")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ccRet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" ccRet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      contract "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sealer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cc"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n      contract "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsealer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("@ticket"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cc"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ticket"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("p",[t._v("A sealer/unsealer pair gives the same functionality as public keys, but without cryptography. It's merely an attenuation of the coat check described above. This design pattern can be used to sign something on a user's behalf. In the Rholang blockchain tutorial, we'll see that a sealer/unsealer pair even works as a signing/verification pair of keys on the blockchain because there are no secrets to store, only unforgeable names to be kept inaccessible.")]),e("h3",{attrs:{id:"beware-of-sending-attenuators"}},[e("a",{attrs:{href:"#beware-of-sending-attenuators","aria-hidden":"true"}},[t._v("#")]),t._v("Beware of sending attenuators")]),e("p",[t._v("A basic principle to keep in mind with RChain processes is one that is similar to more traditional web applications: whatever code you send to another party can be disassembled. Ever since the late 1990s when buying things over the web became possible, "),e("a",{attrs:{href:"https://blog.detectify.com/2016/11/17/7-most-common-e-commerce-security-mistakes/",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("there have been e-commerce platforms")]),t._v(" where the platform relied on the users' browsers to send the correct price of the item back to it. The authors didn't think about the user opening the developer tools and changing the price before it got sent back. The right way to build an e-commerce platform is to store the prices on the server and check them there.")]),e("p",[t._v('Suppose that Bob is willing to run some code for Alice; he has a contract that says something like, "Get a process from this channel and run it."')]),e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",{pre:!0,attrs:{class:"language-javascript"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),e("p",[t._v("This is just like a web browser being willing to run the JavaScript code it gets from a website. If Alice sends Bob an attenuating forwarder, Bob can use the pattern matching productions in Rholang to take apart the process and get access to the underlying resource. Instead, like in the e-commerce example, Alice should only send code that forwards requests to her own processes and do the attenuation there.")]),e("h2",{attrs:{id:"conclusion"}},[e("a",{attrs:{href:"#conclusion","aria-hidden":"true"}},[t._v("#")]),t._v("Conclusion")]),e("p",[t._v("Rholang is a language designed for use on a blockchain, but we have not mentioned anything about nodes, namespaces, wallets, Rev and phlogiston, network structure, or Casper. A forthcoming document will address all these issues and more.")]),e("p",[t._v("We hope that the foregoing examples spark a desire to write more code and demonstrate the ease of expressing concurrent designs.")])])}),[],!1,null,null,null);"function"==typeof c&&c(u),"function"==typeof _&&_(u);a.default=u.exports},UQSp:function(t,a,e){"use strict";a.a={name:"VueRemarkRoot",render:function(t){return t("div",null,this.$slots.default)}}}}]);