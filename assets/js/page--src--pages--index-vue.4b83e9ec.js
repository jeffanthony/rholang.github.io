(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"00xB":function(n,s){n.exports={type:"image",mimeType:"image/png",src:"/assets/static/connect-logos.d810e90.d381a1465c1f2c44a919d8166cf4ebe1.png",size:{width:958,height:833},sizes:"(max-width: 958px) 100vw, 958px",srcset:["/assets/static/connect-logos.adb59be.d381a1465c1f2c44a919d8166cf4ebe1.png 480w","/assets/static/connect-logos.d810e90.d381a1465c1f2c44a919d8166cf4ebe1.png 958w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 958 833' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3722ed9e5dd0547f50e0e6209f9c8acf'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3722ed9e5dd0547f50e0e6209f9c8acf)' width='958' height='833' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA4CAYAAABNGP5yAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHhUlEQVRo3u1Za0xURxQ%2b9y4FgaxVqgKWaHZBtFZ5qOArKG98ooIiIKKC2goKrOwqKlYr64uqPHwFsKhtqharjVrrW2Osr13AWC1JTZsq1jTxFaWoGHWn586du%2bwKNfGH7e4NJ/lyzp2Zu8n3zZkzM3cB2uzdmteqx9R3XdsA3QoeQY8lD6CX7i5t8/CdBu7qJBoL3jKWjQnEBeu8toHzLnys6L38oUKte8AESAV370QxpgIkcggmQqK5z%2b7NfU1Dy8yI2spR4ipKlJPaPX2oEGYR7D8DVotLoMvqBg/PFY8SvBY%2bmOSjvdeJku85vYM0DjPAAQl3NYumlsnsq0obFYJvt/rv1JnHCZn1PSGu8xtHerqHT/HokbIYiSYhZiC0iCxENmZEIBOBs3sBPMqeUQGcNj5NSTxBSPqPhHRYcj/Wo3NEqofv1FQkmY/IY0KMRcxH9JeNAK5lTWKwpclTvaMpuefmxmTXFQ2dLFK9O1Z9xxbCyaUAUitpatHUMbKYc/cczTULkcRjHeCQOCJJPiK0L3smBpuecf12NSkGb3uicF3%2bGARqHhFrrbc%2bJEy3PzntAv%2b1qQuMoCowsNgAKr2Btkl96pXVb3hbUwOQU2sR14ix5G19xymwJCvEBk6AisLIxhhBiq1NIK6RyNcKzzwS563abJy8NPOtEwSL/uaxZvKchqVGzhW%2b1cyQMkFTY6MCNKc5ywAHxADEROwLQLi8LkJLgpoasSrnXOvoOP/yGGftxTBpiIvuss0vBwtyjkh4GfrbiEaMDYihGDu1JM8MM4CRr/FFIdIglrjBlEY/yPw53mqZ2MUSMAxBJGMBvIaYgfFlRCAimPVz1iLMu0Sdr2afM2T/mnxlmf%2bmVzuV80ide9DAwuPxkFk7itUBDrIu27IAPIsLEAkII2I84jBiL2IqWx6vCXCegNBDGoZxsOj50Gsr%2bv/w/Bu3Q%2bT68NMXa/SFmA3%2bwjA%2b6yIH%2bke2LADH4hzEdkQWYi0iFXENMZL2643WArT/WMxyd99IVyf/aSHJE2JjUicNH58xd1xC/LysaOg2pRsdQAh0UEfagwCeiFLEJEQDIh5rwAqEstVdQuk/RTy3B6Q6v%2b832R/UU/uAKq0/dJnqBx5xvToGJPor%2bqYrLMfabi2Q9ntDF5G4YTUiFtvbS7MvnRNaFeFNphwwwy4OQf96DtAbzd5qjNJPvHy0R6/0T%2bIo/F6DfxITKsmmRRAJijsCPQbrDby4PNj5QG9oZQkwAZSiAK3DYoytnwgtt8VmvDk72qzNZGRNexFVYkwOAJQVTISMnKXmfq1WSyFLu50L8NssMX5ZZN2Xq13AIXEuPz8fdDqd/ESoR/L1jNPDYpYBh8GleFmKMlOT79LiS11JiTyz4MF6emgVBdgH%2bVVfRE38NHtZ/AJd7gSc9XGIPES07IgLGXAbM%2bDOYqCXops5kPukEq6c3x44MG5mSffFC3N8kPgghCCEFy4DDraejYHSk9G89ivx6t/Zy8W%2bl0CuSP62DoJuarii55VQtGPd%2bPCM7KVRmAHjGPkwxChEIKYKMf9AaLy3cE6WPlVzFgCLNpsXgQqgBYfqCGcaj5i0GYue1gEJuyCUOPOO6J0Rjng0Aq7waHDI53tjlPa%2bBI6wTzf1FsX9VoHTm1/aZUjTfX0pnWSUhWwXnh0c%2bVB0Y4XbsXB0ZohDZLA2B5vdArUWGaATagAHL3biOWBNAszNWSJkAd36pC2QboPHftH/UfuwnKRtDaoDcBIKwR6EIMYOhHCc2MueFyLW2OJSUFeIy1iFXl1hAlU5oW2WEPpU5Sbzs/m9A1d1i3b%2b9MmZtE2Dd7p5feCN7X14BecleMR0RDCb%2bXBEP1sUQLWNSJ5TVZh4JIae8BgzT8GJ/TQ2CyYbE8i91XiJfG19FX/11jE%2bZUtvzkXpKvwIz2b4dW%2b75CtE8ugDEKG4DFQ4%2b5EY98RsGIQ%2bCNEd8RE%2bj0TvJi4BE0D5uRhYfyQK5laE0h/bUBlgf7OPac38UsQ%2bJFaM/jvEl4hKFOMQ%2bhLMkg3oz%2bDzaMv37D/9mzNgACIM0YN5YfaFTIgSvQkzwRSO8BHHmzj51IC3LGjyKoDCWmaZIKR18y5AdwLeaidg/n8VISXuAkSni/8whcy5BBOTDdyCSANXGnye29f3JG3fEXgWTvU7KM/r6qqwE2IgeQsju/NgNFynsWHgtzL%2bbjX9lOiPh0CPCYZuM2Kueme2O/2h1J3sVidf7nMjqyErtZr%2b0zQ7oTqzWHP15aG86/dPpRufHu97QLiHwNHgI/y5oP3yFODE8FKom11JBTAmlm9s2nCM3NXvbnpSWk1qRx/UCO116ccUl4Kr5CkASYoAsnIWFYDoEjeR/cXkVdHyF2TdHnIjvmw%2bvdLOKlNcDymVpwCmvDAwVU2mApi2jU0xXci9R/YvuvU0O/fOzWG59NPUXzHz%2bN/Dl4OsjfTaSv2LJ/DeizHQzsS%2bNdwaNUfexE3Z4UBAPISYhoyz6rsR8hn1BxYRuBG6UsazfzRWFACLvskYB2RLDDwbPxbqwxfQ9rsjZsOfEUugzdqszdrsXdo/HeJiXzCb7NAAAAAASUVORK5CYII=' /%3e%3c/svg%3e"}},"3GZc":function(n,s,a){"use strict";var t=a("qWrf");a.n(t).a},"5smj":function(n,s,a){},"7XMK":function(n,s,a){"use strict";var t=a("tcbV");a.n(t).a},"84uh":function(n,s,a){"use strict";a("R5XZ");var t={data:function(){return{activeSlide:0}},mounted:function(){var n;n=this,function s(){n._counter=setTimeout((function(){n.activeSlide=(n.activeSlide+1)%3,requestAnimationFrame(s)}),1500)}()},destroyed:function(){clearTimeout(this._counter)}},p=(a("8Ift"),a("KHd+")),o=Object(p.a)(t,(function(){var n=this.$createElement,s=this._self._c||n;return s("div",{staticClass:"connect"},[s("transition-group",{attrs:{name:"fade"}},[s("div",{directives:[{name:"show",rawName:"v-show",value:0==this.activeSlide,expression:"activeSlide == 0"}],key:"1",staticClass:"connect__slide"},[s("g-image",{staticClass:"connect__logos",attrs:{src:a("00xB"),width:"1180",blur:"10",retina:"true",alt:"The Modern Web Logos"}})],1),s("div",{directives:[{name:"show",rawName:"v-show",value:1==this.activeSlide,expression:"activeSlide == 1"}],key:"2",staticClass:"connect__slide"},[s("g-image",{staticClass:"connect__logos",attrs:{src:a("KujK"),width:"1180",blur:"10",retina:"true",alt:"The Modern Web Logos 2"}})],1),s("div",{directives:[{name:"show",rawName:"v-show",value:2==this.activeSlide,expression:"activeSlide == 2"}],key:"3",staticClass:"connect__slide"},[s("g-image",{staticClass:"connect__logos",attrs:{src:a("rOvS"),width:"1180",blur:"10",retina:"true",alt:"The Modern Web Logos 3"}})],1)]),s("g-image",{staticClass:"connect__main",attrs:{src:a("LNam"),width:"1180",blur:"10",retina:"true",alt:"The Modern Web Background"}}),s("svg",{staticClass:"connect__dots",attrs:{width:"958",height:"833",viewBox:"0 0 958 833",fill:"none",xmlns:"http://www.w3.org/2000/svg"}},[s("path",{attrs:{d:"M470 127.683C470 181.683 470.371 187.786 477.5 243.183",stroke:"#2AD6A1","stroke-width":"8","stroke-linecap":"round","stroke-linejoin":"round","stroke-dasharray":"1 30"}}),s("path",{attrs:{d:"M176.401 253.252C235.5 246 284.5 253.252 373 304",stroke:"#2AD6A1","stroke-width":"8","stroke-linecap":"round","stroke-linejoin":"round","stroke-dasharray":"1 30"}}),s("path",{attrs:{d:"M94.5 470.683C165.776 425.389 421.5 546.683 470.865 513.08",stroke:"#2AD6A1","stroke-width":"8","stroke-linecap":"round","stroke-linejoin":"round","stroke-dasharray":"1 30"}}),s("path",{attrs:{d:"M453.5 680.183C412.5 680.183 362.22 620.869 352.74 594.887",stroke:"#2AD6A1","stroke-width":"8","stroke-linecap":"round","stroke-linejoin":"round","stroke-dasharray":"1 30"}}),s("path",{attrs:{d:"M818 614.183C719.5 725.683 653.174 630.762 565.175 603.762",stroke:"#2AD6A1","stroke-width":"8","stroke-linecap":"round","stroke-linejoin":"round","stroke-dasharray":"1 30"}}),s("path",{attrs:{d:"M775.5 270.183C699 292.183 689.433 312.527 623.372 349.107",stroke:"#2AD6A1","stroke-width":"8","stroke-linecap":"round","stroke-linejoin":"round","stroke-dasharray":"1 30"}}),s("path",{attrs:{d:"M791.835 441.342C732.834 454.842 741.333 494.842 683.334 510.342",stroke:"#2AD6A1","stroke-width":"8","stroke-linecap":"round","stroke-linejoin":"round","stroke-dasharray":"1 30"}})])],1)}),[],!1,null,null,null);s.a=o.exports},"8Ift":function(n,s,a){"use strict";var t=a("Q/Hw");a.n(t).a},"8IhA":function(n,s,a){"use strict";var t=a("aI7O");a.n(t).a},"8U9V":function(n,s,a){},"BA+P":function(n,s,a){"use strict";var t={components:{PostMeta:a("n6yM").a},props:{post:{type:Object,required:!0}}},p=(a("YDir"),a("KHd+")),o=Object(p.a)(t,(function(){var n=this.$createElement,s=this._self._c||n;return s("Card",{staticClass:"blog-posts__post",attrs:{link:this.post.path}},[s("h3",{directives:[{name:"g-image",rawName:"v-g-image"}],domProps:{innerHTML:this._s(this.post.title)}}),s("p",{directives:[{name:"g-image",rawName:"v-g-image"}],domProps:{innerHTML:this._s(this.post.excerpt)}}),s("PostMeta",{attrs:{post:this.post}})],1)}),[],!1,null,null,null);s.a=o.exports},IXl8:function(n,s,a){"use strict";var t=a("8U9V");a.n(t).a},Io39:function(n,s,a){},K2Oh:function(n,s,a){"use strict";var t=a("lxMo");a.n(t).a},KgLI:function(n,s){n.exports={type:"image",mimeType:"image/svg+xml",src:"/assets/static/logo-netlify.03b5461.50b3f93d034be3b993615e298e9633dc.svg",size:{width:147,height:40},sizes:"(max-width: 147px) 100vw, 147px",srcset:["/assets/static/logo-netlify.03b5461.50b3f93d034be3b993615e298e9633dc.svg 147w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 147 40' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-fedf2c5a2d0bbf2eee3a5e8b83de1805'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-fedf2c5a2d0bbf2eee3a5e8b83de1805)' width='147' height='40' xlink:href='data:image/svg%2bxml%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAARCAYAAABtu6qMAAAACXBIWXMAAAsTAAALEwEAmpwYAAAIvklEQVRYw71XCWwU1xme9QHYe2KTw%2by9O7NeG19gg/HFrsE2V0qL1BzK0SOVkpCIJnXT0pISkVJE05CiqFWillAbG9uLjQ987e7M7NoGY0wcqqQBGpQ0SUXVNk1LCk2aQFtNv/fmzXpsmlSV2o7063/H/47/%2b7//vTccx74CSeKCUoyW%2bfFoOtGeyWGnZ3J0r/tU9BbWnkZ0UIpzwYlB7v/1WVx%2bqq1uL8p8mtnJ031k270cyulmp0Dree4yZs%2bnLbYHaTnD71QnceR%2b8gKlUSlVzk%2bozvPjI3n%2bE9HX8996RYGWtf6gHKOLFY2KXEk8/l931uRQnc3MvZU4R5xNN9r9cN43184TmFNf7GYgufINWpvR66O%2bmJz%2bT3F%2bJM6VjaiOLIvF0tUIxwKBZPTN/FMJJTARV4Sx6DP5yWhLMDlK4SxidmTs/wKErFudc%2bq5/hQDzIiuDFBatT6UP2t2CSE18ioT0PZ5s4s/C7kKdnxB33fDVzGoOgAQ0mbTIfbjwhNJpfi1s0owERtF1PeVnHtFKZRiU5pNyWgsZV86HGebETRtsCByWNRAogidTqnq4FWKOlVttftImfVTGxo9mzvIGe0%2bUm%2bEc58zO/2LGAA5FndAQfs7jOp2q7eA1K9kO/wL6doufiWz%2bQckhnk3sjUzUswAI8h%2bLCyVuPJBkXaWjkr2kmj85eJYrHOZGP8WHG6GbC2aGFNKp6eU4nj8IvofROSD6jgVtMo%2biStp00DgPzW6mpMWp99g9M3SdbZfSNeV3wA4ilZHGuTC6b9ijldJ/SY%2bQAC%2bD45s1s3/MAPlgRvmdvFc1lLv3MbKPtX58qH4khVD8bfLxyeV5eMnFTj64epDo%2bnQxaD8c9C/Lh2NDy0fjk9CUifg6l6JglDTI9HIs024LU7hM9i8EVEvRvt2tN2FXM5m/Sn2YPO1sP0qbO5GrtKTCmNy0bYJ499G/0ewvx2SZ3V7LADgOsqv0Ug6/IQlqzB2GWflCRgFsD9i8eQTAJ5GeSWkACzaAp06NLKd/gXob0JbHW1Y1Sd6KwbEh8CE35YPS0q5OK6UjYinEOm9ZVFZWT4i/mr5SPx7JSNRd9lwrKj8uHhg5YB4emW/aNeDoEUPeieLwkuQ6xZ3vsLqCaPbTwG35ThImrRZsVlCWasnSPrfhwQAQCUZQ6KPua5bvUEFts15BQsMAIBQ%2bxwFwO7PIXaweYsBO25Vnb9Gxzv59yD3kLmhz%2bhY0mD1FZK2GFfdLfJw4I%2br%2b8RLcGpbZXRCqRgUr4HeOypGZAWsuAyJrBgU91ccFyvh9HbIXoDWi3GDtUclCkJ1t0QiwADgH2NROA/aVUIL0KeZk%2buZzU6rj4LyvNHBm0xOfoPqMD%2bT5QqQ84Ow6A3qjJMvtC0NZuIMsDEGaAAsJgADgJc5a0GazeNfCNv9zOFHMYfZaBPITTJD5kabwNY%2bQECF3sLVdksvVvdIl6oHxpSqXqkfKdG5ql96EWA8B/kpnP0GpH/VgHgF8vTqoTEFjl/HmIGabulZjL%2bDAhCRDIhyCgAScSz4ZR3qX2eo38tY8g7KH1id/hydTQ9hA%2b59Nzu5L6DtY5Pdm6E7A67NAwCMEH6enhvU1t7B2Hanbt4dbD/3s7R7E3LF7PDbuDVd0oq6iPQjRPKZ6h55T9VRcUlNr7yoqld8FI6eqYlPK%2bGpCwSca1XHpB9U9yaUmh75b6HhKaV%2baFoJRaStZNI1EQmneUBLgcdU2goPzua60GwjALiEu0x53gxs6s9ghQL5A8qXod8lUaKRcfFhBsBFAgBuAUvqFriRARSAtJwU%2bN9hKXOv7jDNZzdDt8kp%2bBg721IH4Zouef%2baiDxYG5Fur4nEjFVd8VsQ3QOIMpF9OOD6oXejbVto4KQS7j%2bp1PdPKqFOqZmMrz2aNKztiHP6FGCI6wDgZwHwujLgyIdw9E%2bQb8P%2bKch3Uf4m5Gs4DJ0MtF%2bqAPDW/wCAJxi979Fff6hPQwjYP2Qpchvd2Pqjw1SHOhJ3hjrlVoARhch1EfmF0LFxBfp8XZd8ItQlh0JdiYq6TnlfGHYQes1U9k9y9UdEbt4hqDHgAT0DrCoA97ENXcDprJjs/BL9rZTt4OlNYXMFAJJwHnYfzbsGP07dAioAf8d6Z%2bcDYGEAoL6Q6e3qwQoAXfxvTC6fSXOcC3Wpp3h9u9zUeGxKaeg7rdR3yDvDHfJ04%2bBLyvrYL5RwZ6IDbWONfdPK2jZ5Ex3bmcgIM%2bfDnaIegGaVAcJDOgAeZwy4n9ncrUZKeBdAPIINfwWbvAS5mOnwaC%2b6GfWU5/eDusVWj8dkIWnj5F9PAaDeFK/qANjF2KcBncm0B3KV3RI/YXtS3xxr21NPfa6hTX5yY9%2bMsq5dfh/tD69rT1xt6jkFpxN7GtoSv4fspmM65fTwYXUcUoFrbIvrAdhGDzOn8CUdAI/QKw8pMPswEb6IzfyO2pIcdfGE8g263CX3/18YpZ/wruDINXiZ0JkBYKPnh1M4oQPgcXVt/g6WAuStkMHKfYz%2bDSnGhsEA6lBbIvUqa2xN7NoydE6BlhpaE09tjJxWmloSu1HfRvpvg7NrD7Nx7arz857C5KFhhdOZOgAWwEFcY2qbyaG%2bCLMc/kx6TeLxlHqqegT81Khz4Xq8GUAVmO2BRez5a4GtkQFAHDZjPSMA0E78BRa6thp5k%2b5lir4JyHvGpYFM/X65dW3q32Bji2xoOhKnG9twKLFr6/HzCvSzGw4lj0NWq7bJtHWtqvPhw8l/8dQV5v7Kom5xCfOfw3jvC7MUnNuXpmPInKfywpsqZv8G3YF/u7YRT9%2bb8wKkvQDzPsmY9H0GZHpWXv6scQNzZv3PEobG9iRdeNPB5J7NB5MfbD6YKKJ9LeOGphaZpUriEzdAtPpDJMwBAgwwWFKRDXBWH40g/T8gYtL63GrU8NQlETQAiDSzQ9D%2b9Q3a/wZjgIGsp2MAoTp5ZXImV6HWdoY5P4M5FzNmUB//CQfHUDRImoH7AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"}},KujK:function(n,s){n.exports={type:"image",mimeType:"image/png",src:"/assets/static/connect-logos-2.d810e90.34b4476147b6e15a947734605437df19.png",size:{width:958,height:833},sizes:"(max-width: 958px) 100vw, 958px",srcset:["/assets/static/connect-logos-2.adb59be.34b4476147b6e15a947734605437df19.png 480w","/assets/static/connect-logos-2.d810e90.34b4476147b6e15a947734605437df19.png 958w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 958 833' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-80538c1e5e2ebac0bbaf661551775ee3'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-80538c1e5e2ebac0bbaf661551775ee3)' width='958' height='833' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA4CAYAAABNGP5yAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHu0lEQVRo3u1aC1BU1xk%2b9%2b5CwQf10UySCYrWSML4QNEqTDOtqVXxBcquPJREY03U2Jo2k9SMAtqqyYgRUASMBFmMrzgSmrorihUqvt%2blKkiUuChEpWx4BFxICKffOffe5S6S1HYm4%2b6t/8w333/OuSzzfec/j7m7hPyAQSl1cHvTadJ%2ba7HYXpvF%2b9qr3ybtrZVEs8FEF8m57Y09gnrsa1s%2bZ09PT%2b0a0HfXTc6XonK4%2bP2U6r69tyPo5Fe0O2svjJ6gNkXQpAk304p1vBpSy2Np/qpyeucZSqsm73SY5NNDD9J1MkKvCfGppfV8Vs/Ru0/G5tlsp/%2bxldJy72/3FLz59ZKD9hcw9IzOw3MqeAgQADwPTAOGAcOBHm5tQFqZZEDbv2ivWaes1wNPHqOLT%2bXS6TsP0iW5p2ZjaJ6o9/gtOBZYCrwCvAyEAnMBb7evgtcvnuflnHzj3GsjL5ygkaf315fdSTLJw727eXv5gJ8EnmArQmbW9xPAy63Fv3WuVn0MivuqrC%2bWN9QMJP8vob4DPDDWIvV5eHh81ymgjVNh%2b63PORfX3iXxpSViesVlgX5Twvs%2bqz3apTmPNMIslSTcbJVycyVvK6yMazY%2bPfNL8tMtZTz3Tz8mjNt7TReRf1sIM1vFMItVZP3MHOTaE99aJZC2ailPLlrU5fpTKsNVY%2bzYsRzqPDg42MEKlHZISIjqbi6LTyxaxsULiTV9pv61YnO4pfIGKsCM0h8jmVApuOoyUISxUPg/Pe8UX1q7CdKuTbz9k7Zde3bLRRp9uGr7dLO1EibcB/pKe4PVpXdoRTwEeiLvCe4G9ETuDXRneMCE1ipCWqoE6d5eQxaduxJAR7%2b3bjg/z3P2dY/OuzZxdm4pv9TEfFLqyktAlPMpwG6IXQNsBt5DOwPYAKSjvQ3opdoD%2bDLgBrTcFjfRZiKdX0OpqP4nB5f92aX3AIjSyflyYCnaC4H%2bQALaPoABGMiMQN8IJwNabwtcLG0iES0HnqLnDcFRrF0zZ%2baQ2mjDSlt0BC8dW7TBZUsfwhQDfod2HPgL4CpQj7YvuBBYCKxAe7jTB9wv7Xg5cXFy8N5Gw3TaGBNR1hwTQesiZ1QBPdkYWHBVA5QKADMD3obQtUAIK3vAD/gI/XOB5UCgUwWwsGcHOMR9NTsiBmIz66NmvFUXNePHrixetQcoFfAOsB4iDcBo5AvAE8DjgWDgYyCgwwAcgy03pfcS93cN7lKkIh7sygYIcj5ALnNmxJ/Ay8DxYIbVyOeDnfY3cuP1kcQ2K5zn94zTmFBdfdRMkTEqgH9wfeRMgtzlL0T/7ZHZMcsQB9GOvI4Jlme8zsXFd7oJCmw5sFmWWadmdlw%2bzGXJ7eL7rsJqVj/3OLQWQcZ4BwcZ4iQouTGuo0%2bG5mKULGqUcYVzv1E2wrgSSHAYpemAaBGzrA8yxItdVoshvrcGl0Ccwn2BaBhgxGz/Afl84Ddox6L9Kpjhj9ozwOAwoA/yCUAgMAbtUGAY8mFgf5jAOEC7BhjifIDxQH%2bg2/f%2b0Z43twm7lmbqMyLX63f/PkuPtn7bK5s4cl5L06fPSuTPZcYmu4kJ8V3tB6wqBIwBYKMEkpew66E%2bNGnSKnerAMKFdjrypKOwk0HbF2X4mV5N27Bx2prk7PmpSdkLNienG9YlpRvXpWyJen/dprC1T7PnMmYlavNr7PzEvHn//OgMLVidR0v/colWHC6lJXvO0AvbT9Dr%2by9TlL6RPbdjyQc6d9BDCzugaou0SPrGCSxBHidZ8zbOvXbkMq2rtjXXWmvs5cVX7ddPlNlvldxsLi0ooXlxO/lroNzlO9zCgKb0Po687ZDodAewF3qJAZYmnlcc8Zc6E8etiLqSe4EeyzhML%2b09TU9uLaRFGw/Qo5sP0eNph2nKlNXTuFFzN%2brcqbJp3lOcqxN7e7UXkpArR0awb57JGEs1ocWqB00L0rpjp5%2bcMnV1%2bAcxGyamhr/7TuqMd9e//%2buEiRsmrgrFvuAt7wFuIbyJQvy%2bPlK5XyWR9Cz5jF4iFGVfTf9OFvB9r2CxZMKHL6c81IdmvpTiNjN/a9SveNl/MTR07NVJQWeta/ueaivQHS3%2b24RD0fmF55%2b3NE%2bSK0FaHtjt2QYnZs3bJO5%2b40Mx86VkceucJLI1NlkHiJlzpPNfYVcPW%2bBkvlQbRk6ZYhsaRo//aPTaQan3xj9xgNYNPEPpYHML%2bzUKGWT%2bxnlJM9EKd5W7S9SOCOVcExjqe%2bcXBv7%2b/9mC1qlDiih9ztJ83N9sZ79LIv7m%2b9o81mXxTu2hn9b5Dba0vKC0/S127YqvlcWDBTooWHgxp0LoEN7iEM/yRxa%2bpgYHd859cxpI/6xGp%2bf%2b1xhstksM0Vj7ImuDyXMH7Y6xRxL9ZGGM%2b5kaRd%2bcRpYLUl%2bjwEzgBuQ0aLZSHSbIoh%2bsEi2LV5V9DyBCzn%2bGSvgcbAJ6yX2CpmcfrAfKMdvHIPb4gP2Ugs/ysRwsBVODdssfokU5T/TLoxSC2/xywaaGlXK/TsNLoJ7PsFzmP4fYZm6CqeEE4CMbIOAZ7e4BAw5R8vSaApaPAxKA%2bYCXeu1rdglwcdlffpc5svhGDYtXToHMuywXUeo6sE59Keqn5dnvfBl64EaYXU8ex%2bP44ePfQrPG%2bXBrMpoAAAAASUVORK5CYII=' /%3e%3c/svg%3e"}},LNam:function(n,s){n.exports={type:"image",mimeType:"image/png",src:"/assets/static/connect-bg.d810e90.96d3202e9048dbfae6c09687e4c65c43.png",size:{width:958,height:833},sizes:"(max-width: 958px) 100vw, 958px",srcset:["/assets/static/connect-bg.adb59be.96d3202e9048dbfae6c09687e4c65c43.png 480w","/assets/static/connect-bg.d810e90.96d3202e9048dbfae6c09687e4c65c43.png 958w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 958 833' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e0580dc9e3f11e17ac966a84fe48f003'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e0580dc9e3f11e17ac966a84fe48f003)' width='958' height='833' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA4CAYAAABNGP5yAAAACXBIWXMAAAsTAAALEwEAmpwYAAAMsUlEQVRo3u1aCVBURxru4enGZK3ETaK5k9okm8qxu%2bao3cTN5iyTVBI3MabUUKB4RCMIeEVN4oGCCioiqHg%2bwIDcIigKg4DcyH3fjhzKOcAAM8z5Zvrf7p7DCaESN9lBN8tf9dH9Xr%2bj/%2b%2b/uh%2bD0LiMy7iMy7iMy7iMy7jcnDx0cTf6sCGJ9R%2b/tM/uT1mB3J%2bzT3Av53zPvZYbyb2Zd5qbmZ/IfVSQws0uvMTNK8rlHIuLuCUlFdyK0jrOvVzCra%2b4xm2q7Oa2V8k47yoF51s0wPln9XKBKZ3c8YRrXHBkMxcW3MhFBdZycfsqubM7SrikTQVc6tpcLtM5g8tdnMoVfpHMlc4%2bx9W8d2ZC5kfhdnQ%2b8PxFtNE1YGyIeLsy%2brYyDLyQPFYe4IP%2bURbF%2bk%2bk71v9ZMaBsKczDh9/IZPnX8wK5WfkRPPv5MXz7%2bef52ddvsjPKcjg5xfm8QuKivilxRX8ipJa3r30Cr%2burJX/tqKT9yiX8l4FXbxP5nXeV9zC%2bydc4QOj6vljIdV80JFyPnR/MR/hfZmP8cjh4zdm8ImrUnnxV8l8mlMinzk//lj%2bv2IjLnwWOpfOR/Zaosh1nZ9tCZhGCHDoKGD9qWl7St6WJMCCBjE4NKbCckk2fFZ3Cd6rzoDZtZdhXl0ZGauBLxuvwMqma7BW0gPfXh2Ebc1q8G41gF8bQCDBiQaAk2UA4bl6iL2ohoR4OSRF9EMq3w1ZAdch37sZirc0QuW6GqhzLgeJUxG0zc2Dax%2bng2HmZSh6NyKIecHDl%2bw8lh2wLQHTMw%2bhFdIS1n8p58ilmWWRMLs4VjOn5IxgX3pemFuSJMwtThEcSjOExWW5wvLyIsG1olxYU1kjbKxqEjZXtwieNe2Cd61U8K0bEA7UKYTD5YPC8ct9QkhGtxCW3C5ExrcKsZFXhYSTjcL5o7WC2L9SSPMpFbK2FQp53%2bQJhauzhNIV6ULl4hT1dccMyFp4mgU%2bvJ5vt37rYdsSkNkjQQDA%2bo1yaZaSHHRrFHqpRokp%2brQqLNOqLRhg0Bih0%2bBBndaCIZ3OCK0Oyyk0WgsUagoNVqiMGFZSqPHwsAkKCpWOvB4ae7uZ2UnXzqNGbFsCymTtFgL6NcosOgHAoFcTBTQ6AauJQrRvDdWPoB0dOjN0WDkahBtQ6wVM3swIaFcPWgjwqU2zLQHFfdcsBHSr5Jl0AmRyeunwMPT%2bx1COaI3os2pHAx2TKVXYYDAwAq4NyywE7KpJtaH2OxagfGmLhYAu1RDzAI0g6PuVSixTEfen7a9E/0/APD6oVmMDxkYClAM3CLCpBxxcjtoEhYWAIUHDPECPDXrBYMD/TehvosWjEOBtUwJmvoIiijItBBR2NWcrwQB0PgPE%2btQqvxb0OYJej5UkJwyS/pDV2JAJtK/QaEYlwLYeIN6CUOgqtuyceNzVFQU7wx%2bjPXDbQB%2bdlDFulcPQo1CAVK5g8dojl0PPMOkrlQz9pnY00DGaS0hIMUWNzxvlWnKeEjW2IeBhj5CPE%2bve7/z5nSjEtfP19EA4LSnVV/dcB1q66ISHVGqM9YC1pDYMEivpSWsQMLOsdQwTRbE5b1gfU%2bW0xAPk5F6qrGz0HAC3JgfsXiSizeSdSx5DISt7VxfEQedgv6Gut4NYTIPlKg2Uyzrxhsw4OBEZDy1dPbA7OAy2lyZDi1xGyYFeJcvgIOgMoNRoqSVBrtbQY6acdAQBJsXBCj9JgM1ywO99liK7o85G9z/s/C6K%2bhrQSRdDTH0RJusAMnEF0JhtHuzHU2O3AJr5Fnz4wSJAn7wJ/8w4DDJS6nrYNWqm9N6aDHjmnDfcFb0RXhX7w/66LEy9hypHQ%2bCXEmATD5i6z9mY%2bPZ%2bwQhA/otfR6HuMDF0DY6tL8RaQU9dGTrkQ5jkRCzul8BkPxeY9Lc3YHLoemhS9gE5T8epS8MnmUGA%2bCXwQcYxWFkcByjMHVDIV9g%2bJwwPEO/QkkXOkEZ9%2bxBglsjqfEbAZ1F%2bHyZerTDENBZDWVcLLupoJpMdxtS9qfv2KAZhU348IH8n2FojZotFsnKDYeLy3tVpgIKWQnhLKfRphsGnNh0mRBJvOrUaUxL867LZ2nJArbqNCPB0QAGFYhb/804ffCauvmiIvrh1QGqgrVQph6ru64QAJSGkDYrbJTihuQJPF/vCkFbNFKJ1u5%2bEyJNnd8DHmSegWy2HyTHfUsVhUvQGeDzBExNPwDPEAex6qqAVASMx9h5Q0d3GMS6y479rUvXT9%2bpaB3uhWdaDO%2bQyfLahFJd2tuJCovxVmZSUaMAdyiHW6gxkqURmS/PDPTHf4c2VyRDQkE0UdoNTLSXwaVYQ8QYlnpXJ44fPbGM5QMFyAEmYI6qH7JYkQeIBxILM/eMbiuMlShl9r0D/FHc244J2CY1bYv1WKOxogU6FHK4NDbC2jbS03zokY/X7uUQf%2bEvSXnxCUgB3RG0AFL4GP3jGAy501OFnz/vgFy/4WkLgl6wDbEZAu7yfERBambO7SdHLVsDErnRHBhLiBdTyTX3dZAWns1qxqVgyo5CplCxB%2btdnYRT0JWyvTsFJHfWYtCDurMerSkjOIOePNeXTZ%2bJhrZZVAsVIkPO0pbvDsV0JbrO3LIHPNBQngVH09M%2bVvi5MkyGdOBW2Qf4J2OeFYRS8DGZcDMCkCuDpSb70GC8piPrZe61BRBgzD2DfA/e7sjxw187F7q%2bd9YW56UHCG4l%2b8GjEJtwk62aTolsUulmxWMtkMWpR6gnMbKRs%2btVm4unE3R%2bI88CvJPnhQ/W5WK83sFwhN12vsAY5R59rJtkkY%2bQBXg7ore93ILR1LiMAbZ7vhgKWkPrtKpBERsqXC4hba0wEGDBNYlLr%2bDX1pWSPQMfYhoesBElZZAsosiLEOq2BJTY1vVehuHGf6d5e0wrR2svGNAREno5I5LWAESDycnSz810K3MlVwu9iNpCYXg5Ha7PZpGhe0BIl2Dqefh8wfyMgLVVGR5SgitJVIc3q5j0CPaaWZ/cOG7O/5RuB6RrdrSSAhYGXo9EDCAFkXwAoYJkwIXo98YAVsPbyaUsImAn4wSZGZczqVIkhqxrfZxqnx2YCjF98flj3%2b247AvYsBrRzgWAXtobUc1f4OOWIcVJgIcBiuf4RHmAmwPor0I8IsKr/5tp/MwR4jwkBng5uaO9isPN0FCYcccHolBs8F7eD6s4mpjEpMbJ%2b09imcTyg%2bnGNZ1tpQozGOgeMGNfeLh4gYh6wCCb7LBWcU0MJAavg/ujvcJd8gE2MWopm7uERoJncQDI5/XJsPa40tVR5vamCKEe5X29VBW4pAXZeC0gOcIIpe5cLddJ2PCXyG0x3h0VdzWxidDdnVmwkrJWmoDmDfgY3Q6nV/uDYGrcNARN2LnRDuxzg5RObhdq%2bDvy7U%2bsIAatwYaeRADpZSxkcpRxalzjq1qN9Eh95Tno7hcAduxa5Ia/5YH8mUEusbkAnXeCJWA%2bDSquhu0MDcWUDmbSBJK6fBQmXm7quz3QtfT5R3AytiYCAMSXgTu8lq9C2z8E79xzk9TQDOr7IsCgnHG6VtCsHD9m%2bCng5UhIYARN3Oq1CO%2b0hpDyr42h9bh865gT%2bVel0h9Q6pFNfVwpaM9qVgs4ClaDrsEInBbmGtl1W6LZCjxWk5Fpr9BJ0q/U6oUku9TYT4FmdMiZl0B35L4OJ2xxfQvxKTxS9Hu4%2buPKlv1%2bPnvjUGa8pf72w557nE3ff/arY/553Ug9PefPioSnvpR/7w%2bzs4HvJ3v/eOdkh9y7ID7%2bPYuHliPu%2bKoyd6lJ0euoK0q4uSZj2dem5aWtLz077pvz8A1sqkx/cXJH04FbS7qhOfWhH9cWHdtakPry37tIjFPvqMh7zqBRPodNK6qhDszJ42xEgurEQWsMWQtPumyQKcQ8RBbu13%2bpfiCR31Nv4DTQEPOYZCdj2xUbkMd%2bo9PEVOejIlywGn7iwa4JbQaxoe1WKyKNKLCIWE/nUpIu8CfbUXhL51WcRZIr2N2SJDjXmEOQyHL2SLzpmQpCkQBR8tVAULCkUnbxaJAprLhGFNhezNqKllCGypUwU01YuimktF8W2VYiONuWzqUjkvcgh75TtPODJg2sZAQ/4uXg8HbjuiqSketLT4Vva3o7z9WTX7Heyi60rQh9F7PkN/jyMEBBalcu%2bCm1Mi5qd0FBSTqpA%2bIFCcVp6c03u%2brRIf7T2/bvp%2bFOH1v5f/GLODm2ZO4m01Cu4R/a73fXskQ2MoGl%2bLr9Bdf3sb%2bqyF49v%2bo3am4TAp9H7WXdG8HY0P%2b4Qw6xIX7Qw4SiaE%2bPP/n1G5dEAdzQu4zIu4zIu/wPyb27KUbblzot/AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"}},NAO6:function(n,s,a){},"Nt/l":function(n,s,a){},Oi2N:function(n,s,a){"use strict";var t=a("sdWu");a.n(t).a},"Q/Hw":function(n,s,a){},Wavt:function(n,s){n.exports={type:"image",mimeType:"image/svg+xml",src:"/assets/static/logo-algolia.d9b3a18.35c461b6f41f8ad7f561eaffc3084a94.svg",size:{width:485,height:120},sizes:"(max-width: 485px) 100vw, 485px",srcset:["/assets/static/logo-algolia.d9b3a18.35c461b6f41f8ad7f561eaffc3084a94.svg 485w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 485 120' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-8d29de5b6ff3ee3783abd7f4d2064040'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-8d29de5b6ff3ee3783abd7f4d2064040)' width='485' height='120' xlink:href='data:image/svg%2bxml%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAQCAYAAACm53kpAAAACXBIWXMAAAsTAAALEwEAmpwYAAAG5ElEQVRYw51XaWxVRRR%2b77VgjcaAC6IgwQiJYOIP44JLpDEguLC077UFukvb91pKKUVEdtwIEVCIYFBBI0uAAEaBgEDC4oKKxvhDWVxQlgZkk62y9c3nd2bOve%2b2QEm8ycksZ%2bbOzDffWSYUjWN/TiXAMhlL2BJSSp8ngX5DSeZW2fbkED%2b2w6yHWvpicRPWsTdw7O5oAgcH1ML2RRMm9H8%2bWZP/S3P/x7jBI7inBLJSenM9x7Rya7SwPzsxjkveoaXMqgCeLQaeLwWeK0mBIiXFeGNZ76abiUQr4C8km%2bMGtLQb9QC4mdIgAPQf4QEQnBOQilS/HiigN6HsihQAbM8tHGX3M1Dn3EXZS/mKkhH8P%2bfYMtu7tMDtm/4vAAOGAiV1wNc/AL/uBVZv4mETDgBlgJHxOY4FT/kA%2bBtFOJYwaXJoWYwiOm%2bjbVk/2QSASnugMPsCc0yEzEiPKnPsxuNOnzvM/2ckBQBmKQBZus59edW2fZzSVlmSLvOzLQhG1kmzexY6C60HlMHUvQbk1wB57NuwDVi/BVi%2bBuhHYIi4d%2bsWhBw3r6febMQ7fIu0TaAt5VQzBkSuQfVwzlUozHVb6eFmOwDMgIAJdObcTlZf2YIJDKq2NE9OmAFcuAi8OhtYtQ44dAQ4ehzYVw8s/czRX0yjKQNMZoAB3m11pMy39EvgO5aLKD1Ud4vHgH61JpxT7rOmDWUC5UvqfmS5kjKF0iEARDFlGw%2b7R/VPBHSzgybAMTex/jblw1i5fznjKTu4/91qGnV2ct4w0r4MyarxwKwFwN79sJ%2bAsHAVsPEL1/5pJ1mQ8gEOgAQyPQYQDG%2bhByiNlD/EwRbU2TmNdIRdOD6DcloAyBrm07c9ZY8e4E/K9wJw4YtBmzazi1z7NOVbmgEGDbftqP7jnaAJEIA71QSO5EV9kLey/yhLuRTj/mdmWROgJHsPAT7fCjQ2AmVjgMeygGWrHSAfLHUgLPoE6FsEI%2bObACAMUJrSvlqxfV3gdsYUj7abGW3tO46zAkB2FdJVP6/4JaufEZjzXv5I2/c4pfuQWlvfKQxSfaZGogPafktNwGNAe7tOHL8F/hnc092UU/KPkKCZVU7EuUgyCcxfBvQpcHa/Zbs7%2bESax7rNwN/HrJNMhUIFgA4rQqoFPXonSiE3JLQdJ4chMNMHiZOL4wzH1z85l564zIjp7IpZ32I6p8Im5umNPkypUYDqlG2tdY2NDiTTjfXX9UaVAUYAOC8sjJX4pkmzMLkSMlmvpOyTS7QmQO%2bfHD7JHXbSTBf%2bxOmNnQaUkw2ZuY4F585bthjqmgAQcz7AM4GE6JSicgsXJdRy4zMZ2hQA1NuxFbiR%2bnrKP5TbOC%2bsB3hfAehBeaXIMSjfi%2b%2b6zscKDMeYKRaAhG8CHgB/6djuHHMov9Y3o7M2rNOfWQCEAUUjHQPmLQZ65wODh1vfYD2/tMU8LAPKrsAAP8yhjVLvDOV%2b7esnh%2bGcN3ngiOoOesBRdmuO0SnAgDkBBpTpQSc0iw7b1DS6UN5QH9Ff59%2bhAOzTsQtUX271FSZDnKmw3/oAHjL5TBGwnbG/4V%2bggDcmPkGY0ItlzWTHDokGfQsv9wFE17Pn2%2bXG9VY7al8vZwLOxm3m6SJIL20vcTdshCEZbAsr1qoP6Elpp/Z%2bgvKgzinVw/%2bs7YkCEg/1rgLQjtIgJqD7W6zOuFz1t1J%2bsSZgAeCNDuRtlxKlEycd1T9aAUydA6xY6w6/63fHhuxgFIinGOBle6wvlAOp/gCloWSM9QELVP%2bybEZNpIMAxc0cVq9/Udigjtm/UZZVMn5wje07o4cRKj%2bi%2bq6Uo6Vjbf8khtfWGgVOKAB95LZ1ngBzTsxS/hnShZI8nOkvWSCpt/Ub4PwFwBjgbAPw6Qa3IZqKgCV5wGWJkJe10T%2b0pr6ah1rO/vWsL6VMF48eoG9UYrTHEglbrI/lP5awHEVZM8Sl6E8H5jzEcTP1f4zppoP2e%2by7R1JijsklAGksF9GXzIoN9S/mUYkW7F%2bmuck0Ma%2bQ5v%2bNCoIwQcwhObgaSTpA28fQlxTHJ0zRtPlS01TYywFM6NpZnbms7wrjdihD7g2a2BXGRYJlCxno1TPUgpH6%2bqtyIlQRxxjVR5GEKKFTrupztO1CF7rqBsOBt4AzCefgJOdmzi55vb9Zq%2bf/0wOvtnWUTexbIf5Dnd5KZUdYXoyababpOyDdAy6WCr3ynrD9sTL7vvCTM%2b%2bSYu69EVFJt86bis2sHGbHQYo4r3opRXhYv%2b73Owe3nxJv/hxu8nJLuLzAe701Z0ggdW6nqekxDYeSqk4NhLtwIDr4rzpvvdyKVJuUt2MkxdaHWLN9oclLVb7/APJbZh4wn7wUAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"}},Xnjk:function(n,s,a){},YDir:function(n,s,a){"use strict";var t=a("NAO6");a.n(t).a},YtLu:function(n,s,a){"use strict";var t=a("Nt/l");a.n(t).a},ZqBe:function(n,s,a){"use strict";var t=a("Xnjk");a.n(t).a},aI7O:function(n,s,a){},aK7f:function(n,s,a){},gEGz:function(n,s,a){"use strict";var t=a("aK7f");a.n(t).a},iyQ6:function(n,s,a){"use strict";a.r(s);var t=a("hBbZ"),p=(a("R5XZ"),{data:function(){return{currentText:0}},mounted:function(){var n;n=this,function s(){n._counter=setTimeout((function(){n.currentText=(n.currentText+1)%5,requestAnimationFrame(s)}),5e3)}()},destroyed:function(){clearTimeout(this._counter)}}),o=(a("n0V4"),a("KHd+")),e=a("Kw5r"),c=e.a.config.optionMergeStrategies.computed,l={metadata:{gridsomeVersion:"0.1.0"}},u=function(n){var s=n.options;s.__staticData?s.__staticData.data=l:(s.__staticData=e.a.observable({data:l}),s.computed=c({$static:function(){return s.__staticData.data}},s.computed))},i=Object(o.a)(p,(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("Section",{staticClass:"intro"},[a("div",{staticClass:"container text-center"},[a("div",{staticClass:"intro__message mb",attrs:{hidden:""}}),a("h1",{staticClass:"intro__title"},[a("span",[n._v("Rholang is a")]),a("transition-group",{staticClass:"intro__keywords",attrs:{name:"rotate"}},[a("div",{directives:[{name:"show",rawName:"v-show",value:0==n.currentText,expression:"currentText == 0"}],key:"0"},[n._v("new concurrent language")]),a("div",{directives:[{name:"show",rawName:"v-show",value:1==n.currentText,expression:"currentText == 1"}],key:"1"},[n._v("performant language")]),a("div",{directives:[{name:"show",rawName:"v-show",value:2==n.currentText,expression:"currentText == 2"}],key:"2"},[n._v("blockchain language")]),a("div",{directives:[{name:"show",rawName:"v-show",value:3==n.currentText,expression:"currentText == 3"}],key:"3"},[n._v("language for distributed computing")]),a("div",{directives:[{name:"show",rawName:"v-show",value:4==n.currentText,expression:"currentText == 4"}],key:"4"},[n._v("community language")])])],1),a("p",{staticClass:"intro__lead lead post mb"},[n._v("\n      Rholang is an open and scalable blockchain language designed for speed and\n      reliability. Build on latest research from the\n      reflective high order calculus.\n    ")]),a("p",{staticClass:"intro__links"},[a("g-link",{staticClass:"button primary button--large",attrs:{to:"/docs/"}},[a("span",[n._v("Get started")])])],1)])])}),[],!1,null,null,null);"function"==typeof u&&u(i);var r=i.exports,k=Object(o.a)({},(function(n,s){var a=s._c;return a("svg",s._g(s._b({class:[void 0,s.data.staticClass,s.data.class],style:[void 0,s.data.style],attrs:{width:s.data.attrs&&void 0!==s.data.attrs.width?s.data.attrs.width:"20",height:s.data.attrs&&void 0!==s.data.attrs.height?s.data.attrs.height:"20",viewBox:s.data.attrs&&void 0!==s.data.attrs.viewBox?s.data.attrs.viewBox:"0 0 400 400"}},"svg",s.data.attrs,!1),s.data.on),[a("path",{attrs:{fill:"#E10098",d:"M57.468 302.66l-14.376-8.3 160.15-277.38 14.376 8.3z"}}),a("path",{attrs:{fill:"#E10098",d:"M39.8 272.2h320.3v16.6H39.8z"}}),a("path",{attrs:{fill:"#E10098",d:"M206.348 374.026l-160.21-92.5 8.3-14.376 160.21 92.5zM345.522 132.947l-160.21-92.5 8.3-14.376 160.21 92.5z"}}),a("path",{attrs:{fill:"#E10098",d:"M54.482 132.883l-8.3-14.375 160.21-92.5 8.3 14.376z"}}),a("path",{attrs:{fill:"#E10098",d:"M342.568 302.663l-160.15-277.38 14.376-8.3 160.15 277.38zM52.5 107.5h16.6v185H52.5z"}}),a("path",{attrs:{fill:"#E10098",d:"M330.9 107.5h16.6v185h-16.6z"}}),a("path",{attrs:{fill:"#E10098",d:"M203.522 367l-7.25-12.558 139.34-80.45 7.25 12.557z"}}),a("path",{attrs:{fill:"#E10098",d:"M369.5 297.9c-9.6 16.7-31 22.4-47.7 12.8-16.7-9.6-22.4-31-12.8-47.7 9.6-16.7 31-22.4 47.7-12.8 16.8 9.7 22.5 31 12.8 47.7M90.9 137c-9.6 16.7-31 22.4-47.7 12.8-16.7-9.6-22.4-31-12.8-47.7 9.6-16.7 31-22.4 47.7-12.8 16.7 9.7 22.4 31 12.8 47.7M30.5 297.9c-9.6-16.7-3.9-38 12.8-47.7 16.7-9.6 38-3.9 47.7 12.8 9.6 16.7 3.9 38-12.8 47.7-16.8 9.6-38.1 3.9-47.7-12.8M309.1 137c-9.6-16.7-3.9-38 12.8-47.7 16.7-9.6 38-3.9 47.7 12.8 9.6 16.7 3.9 38-12.8 47.7-16.7 9.6-38.1 3.9-47.7-12.8M200 395.8c-19.3 0-34.9-15.6-34.9-34.9 0-19.3 15.6-34.9 34.9-34.9 19.3 0 34.9 15.6 34.9 34.9 0 19.2-15.6 34.9-34.9 34.9M200 74c-19.3 0-34.9-15.6-34.9-34.9 0-19.3 15.6-34.9 34.9-34.9 19.3 0 34.9 15.6 34.9 34.9 0 19.3-15.6 34.9-34.9 34.9"}})])}),[],!0,null,null,null).exports,d=Object(o.a)({},(function(n,s){var a=s._c;return a("svg",s._g(s._b({class:[void 0,s.data.staticClass,s.data.class],style:[void 0,s.data.style],attrs:{width:s.data.attrs&&void 0!==s.data.attrs.width?s.data.attrs.width:"263",height:s.data.attrs&&void 0!==s.data.attrs.height?s.data.attrs.height:"228",viewBox:s.data.attrs&&void 0!==s.data.attrs.viewBox?s.data.attrs.viewBox:"0 0 263 228",fill:s.data.attrs&&void 0!==s.data.attrs.fill?s.data.attrs.fill:"none"}},"svg",s.data.attrs,!1),s.data.on),[a("path",{attrs:{d:"M161.417.655l-30.226 52.352L100.966.655H.311l130.88 226.69L262.071.655H161.417z",fill:"#4DBA87"}}),a("path",{attrs:{d:"M161.417.655l-30.226 52.352L100.966.655H52.664L131.19 136.67 209.719.655h-48.302z",fill:"#435466"}})])}),[],!0,null,null,null).exports,g=Object(o.a)({},(function(n,s){var a=s._c;return a("svg",s._g(s._b({class:[void 0,s.data.staticClass,s.data.class],style:[void 0,s.data.style],attrs:{viewBox:s.data.attrs&&void 0!==s.data.attrs.viewBox?s.data.attrs.viewBox:"0 0 774 875.7"}},"svg",s.data.attrs,!1),s.data.on),[a("path",{attrs:{fill:"#FFF",d:"M387 0l387 218.9v437.9L387 875.7 0 656.8V218.9z"}}),a("path",{attrs:{fill:"#8ed6fb",d:"M704.9 641.7L399.8 814.3V679.9l190.1-104.6 115 66.4zm20.9-18.9V261.9l-111.6 64.5v232l111.6 64.4zM67.9 641.7L373 814.3V679.9L182.8 575.3 67.9 641.7zM47 622.8V261.9l111.6 64.5v232L47 622.8zm13.1-384.3L373 61.5v129.9L172.5 301.7l-1.6.9-110.8-64.1zm652.6 0l-312.9-177v129.9l200.5 110.2 1.6.9 110.8-64z"}}),a("path",{attrs:{fill:"#1c78c0",d:"M373 649.3L185.4 546.1V341.8L373 450.1v199.2zm26.8 0l187.6-103.1V341.8L399.8 450.1v199.2zm-13.4-207zM198.1 318.2l188.3-103.5 188.3 103.5-188.3 108.7-188.3-108.7z"}})])}),[],!0,null,null,null).exports,A=Object(o.a)({},(function(n,s){var a=s._c;return a("svg",s._g(s._b({class:[void 0,s.data.staticClass,s.data.class],style:[void 0,s.data.style],attrs:{width:s.data.attrs&&void 0!==s.data.attrs.width?s.data.attrs.width:"592",height:s.data.attrs&&void 0!==s.data.attrs.height?s.data.attrs.height:"370",viewBox:s.data.attrs&&void 0!==s.data.attrs.viewBox?s.data.attrs.viewBox:"0 0 592 370"}},"svg",s.data.attrs,!1),s.data.on),[a("defs",[a("linearGradient",{attrs:{id:"rholang-small-white_svg__b",x2:"1",y2:"1",gradientUnits:"objectBoundingBox"}},[a("stop",{attrs:{offset:"0","stop-color":"#f50008"}}),a("stop",{attrs:{offset:".322","stop-color":"#da161b"}}),a("stop",{attrs:{offset:".611","stop-color":"#da161b"}}),a("stop",{attrs:{offset:".611","stop-color":"#a11a18"}}),a("stop",{attrs:{offset:"1","stop-color":"#da161b"}})],1),a("clipPath",{attrs:{id:"rholang-small-white_svg__a"}},[a("path",{attrs:{d:"M0 0h592v370H0z"}})])],1),a("g",{attrs:{"data-name":"Web 1920 – 1","clip-path":"url(#rholang-small-white_svg__a)"}},[a("path",{attrs:{fill:"rgba(255,255,255,0)",d:"M0 0h592v370H0z"}}),a("path",{attrs:{"data-name":"Rectangle 1",fill:"url(#rholang-small-white_svg__b)",d:"M0 0h370v370H0z"}}),a("text",{attrs:{transform:"translate(185 253)",fill:"#fff","font-size":"100","font-family":"ArialMT, Arial","letter-spacing":"-.023em"}},[a("tspan",{attrs:{x:"0",y:"91"}},[s._v("Rho")])]),a("text",{attrs:{transform:"translate(374 253)","font-size":"100","font-family":"ArialMT, Arial","letter-spacing":".024em"}},[a("tspan",{attrs:{x:"0",y:"91"}},[s._v("lang")])])])])}),[],!0,null,null,null).exports,b=Object(o.a)({},(function(n,s){var a=s._c;return a("svg",s._g(s._b({class:[void 0,s.data.staticClass,s.data.class],style:[void 0,s.data.style],attrs:{fill:s.data.attrs&&void 0!==s.data.attrs.fill?s.data.attrs.fill:"currentColor",width:s.data.attrs&&void 0!==s.data.attrs.width?s.data.attrs.width:"20",height:s.data.attrs&&void 0!==s.data.attrs.height?s.data.attrs.height:"20",viewBox:s.data.attrs&&void 0!==s.data.attrs.viewBox?s.data.attrs.viewBox:"0 0 24 24"}},"svg",s.data.attrs,!1),s.data.on),[a("path",{attrs:{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM9.29 16.29L5.7 12.7a.996.996 0 111.41-1.41L10 14.17l6.88-6.88a.996.996 0 111.41 1.41l-7.59 7.59a.996.996 0 01-1.41 0z"}})])}),[],!0,null,null,null).exports,m=(a("8IhA"),{components:{Bullet:b,VueLogo:d,RholangLogo:A,WebpackLogo:g,GraphQlLogo:k,Dots:Object(o.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this.$createElement,s=this._self._c||n;return s("div",{staticClass:"dots"},[s("div",{staticClass:"dots__dot"}),s("div",{staticClass:"dots__dot"}),s("div",{staticClass:"dots__dot"}),s("div",{staticClass:"dots__dot"})])}],!1,null,null,null).exports}}),h=(a("YtLu"),Object(o.a)(m,(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("Section",{staticClass:"works"},[a("div",{staticClass:"grid-cols grid-cols--gap-large grid-cols--full-md"},[a("Card",{staticClass:"text-center",attrs:{title:"Write a smart contract"}},[a("h4",[n._v("IDEs")]),a("ul",{staticClass:"bullet-list mb"},[a("li",[a("a",{attrs:{href:"https://marketplace.visualstudio.com/items?itemName=tgrospic.rholang"}},[n._v("Visual Studio Code Plugin")])]),a("br"),a("li",[a("a",{attrs:{href:"https://try-rholang-22.netlify.app/"}},[n._v("RChain Cloud")])]),a("br"),a("li",[a("a",{attrs:{href:"https://github.com/tgrospic/rholang-idea"}},[n._v("Intellij Plugin")])])]),a("template",{slot:"outer"},[a("Dots",{staticClass:"hide-for-small"}),a("Dots",{staticClass:"dots--vertical show-for-small"})],1)],2),a("Card",{staticClass:"text-center flex-align-middle",attrs:{title:"Compile"}},[a("p",[n._v("compile code written in")]),a("div",{staticClass:"card__inner__logo"},[a("rholang-logo",{attrs:{width:"100%",height:"100%"}})],1),a("ul",{staticClass:"bullet-list mb"},[a("li",[a("Bullet"),n._v("complete asynchronous language\n        ")],1),a("li",[a("Bullet"),n._v("runtime engine written in type safe language (scala)\n        ")],1),a("li",[a("Bullet"),n._v("concurrency build into the language\n        ")],1)]),a("template",{slot:"outer"},[a("Dots",{staticClass:"hide-for-small"}),a("Dots",{staticClass:"dots--vertical show-for-small"})],1)],2),a("Card",{staticClass:"text-center flex-align-middle",attrs:{title:"Deploy"}},[a("p",[n._v("propose smart-contract to the global distributed Rchain network")]),a("ul",{staticClass:"bullet-list mb"},[a("li",[a("Bullet"),n._v("types of interaction bounded by namespaces\n        ")],1),a("li",[a("Bullet"),n._v("sharding for validators\n        ")],1),a("li",[a("Bullet"),n._v("asynchronous notification for names in a contract\n        ")],1),a("li",[a("Bullet"),n._v("scalable DAG structure (Directed Acyclic Graph)\n        ")],1)])])],1)])}),[],!1,null,null,null).exports),w=a("BA+P"),f=a("suUz"),y={components:{PostCard:w.a,Newsletter:f.a}},v=e.a.config.optionMergeStrategies.computed,C={posts:{edges:[{node:{id:"e18110eb2240d68a434ac4555efb5256",title:"Why blockmerge matters and how rchain is solving the scalability problem",path:"/blog/2021/02/13/rchain-merge/",date:"13. February 2021",timeToRead:1,content:"<p>Blockchain is all about storing a state. But with blockchain the current state is not decided by a single entity. That means you have to have a consensus about what the current state is in such a way, that nobody can cheat the system and makes state changes (like double spending money) which are harmfull for others. Blockchain 1.0 like Bitcoin are running all transaction in a chain and every validator has to see it. Blockchain 2.0 is using a dag structure (directed acyclic graph) and POS (proof of stake) but also every validator has to validate the work.</p>\n<p>With Blockchain 3.0 like Rchain, which is building on the concurrent rho-calculus, there is concurrency built into the protocoll. With this the network is not only producing a directed acyclic graph block structure, where the state is saved, it is also possible to make a last finalized state proof. With that the network can remove transactions from the past. Think about it like a new genenesis block which is beeing generated. This feature to forget transactions, but having a consistent state is completely new and no other current blockchain platform has this possability. Additionaly every validator can produce new block, with transaction in it. With blockmerge all these local directed acyclic graphs can be merged together to one. This makes the network linearly scale with additonaly hardware and nodes. This is also a feature no other blockchain network has currently.</p>\n<p>The following slide shows how blockmerge is working:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2133 1600' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b077ae5be4b97d33de9a89c9dc48addf'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b077ae5be4b97d33de9a89c9dc48addf)' width='2133' height='1600' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAwAEADASIAAhEBAxEB/8QAGwAAAwADAQEAAAAAAAAAAAAAAAMEAgUGBwj/xAAwEAABAwMDAQQJBQAAAAAAAAABAgMRAAQSBSExExRCUWEGByIkMkFxcqEVNDWBov/EABUBAQEAAAAAAAAAAAAAAAAAAAAB/8QAFhEBAQEAAAAAAAAAAAAAAAAAAAER/9oADAMBAAIRAxEAPwD6poopF/cdksri4wK%2bk2pzEcmATH4oH0V59pnrNs7hnO80%2b5Z2BHSPVBnw4k8bCTztCSa2tn6cWVyzqLibS79zLXspCVdUOQAUEHFUEwSCQI53ig6yiuKT6xtLU6poWWp9RKc1J6A9kQSZOUcJJnj5cyKxb9ZGlLbcc7Le9JKsMwlGM77FWUD4VbzjtzvQdvRU%2bn3bd/YW12xl0rhtLqMhBxUARP8ARqigKTdl8ME2iW1OyIDhIETvx5U6ig1KXtYDTZVYWRXvkkXJATvtBx32oQ/rOEmxsgrKAkXKojbecflvW2qF959Dr6UFsjEYT3T5%2bVTRKpzVXRg7p9ippYKVhVwTIjiMdxyIqRbOoqs%2bwjRdK7FgE9FT0ojwxwiJrZsvXK7i2BU2lGJ6g5KjHd8q2FUJsuoLVsPNNtLjdtsylPkKdRRQFFFYPt9VpSAtbZPeQYI%2blBnUtywnF5xtvJxSSFAd8eFLVYLOXv14JjhSdv8ANCbBxI/f3h%2bqk%2bH21LNDLa3RDLrjeLiEAJB7g8KqqA6esoSnt96CBE5pk%2bfw0fp65/kL35d5Ph9tUX0Uq3aLKCkuuO7zKyCfwKbQf//Z' /%3e%3c/svg%3e\" width=\"2133\" alt=\"merge1\" data-srcset=\"/assets/static/merge-1.82a2fbd.d0689533e1a9249fa2b620790da3e750.jpg 480w, /assets/static/merge-1.cbab2cf.d0689533e1a9249fa2b620790da3e750.jpg 1024w, /assets/static/merge-1.0605eb3.d0689533e1a9249fa2b620790da3e750.jpg 2133w\" data-sizes=\"(max-width: 2133px) 100vw, 2133px\" data-src=\"/assets/static/merge-1.0605eb3.d0689533e1a9249fa2b620790da3e750.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-1.0605eb3.d0689533e1a9249fa2b620790da3e750.jpg\" width=\"2133\" alt=\"merge1\"></noscript></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2133 1600' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-567c39b538311e5e336f1774df9d4950'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-567c39b538311e5e336f1774df9d4950)' width='2133' height='1600' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAwAEADASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAUEBgEHCAID/8QALRAAAgEDAwIFAwQDAAAAAAAAAQIDAAQRBRIhBjEHExRBUSJhcRUyc4Gx0fD/xAAVAQEBAAAAAAAAAAAAAAAAAAAAAf/EABgRAQEBAQEAAAAAAAAAAAAAAAABMREh/9oADAMBAAIRAxEAPwDqmig0vurq8V4vS2oljZgCxbHHucUt4Xwh1zrvTtF1yTT76G4URqhacBSg3c/OeBk/1WZPEDQ43hDzTKsk3p2YxEBJMElT9xjn8irK9layTmeS3haYjaZDGC2PjOM4qPPY2tvbs9tpsEsioFWNERSQOy5PAAyaBBJ4haHCZfUyXECJsId4Th9wB4/AYE/Y5phofVNnrc6x6dFcyjGZJNmEj74ySRnJVgMZ5U1kxIYzEem8xK30riDB%2b4G6vvb3E8KZj0OaIk4Kq8I4554b/s0DeiolrdXE05SWwngjAJ8x3QgnPbCsTUugDSwteKsYto4zDn6TnnH3HYf1TM0qdb9hCbN4RBuHDA528%2b/b4qXEuGoqPqF5b6fZT3d7KsNtCheSRuyqO5qQKh6xEk%2bl3UMjBUkjKMSu4AHjtVVSp%2bstHUs1t1UzYXcRLGFAXvkHyjmiHrTSrl44m6mEZx%2b6AeYzn4wYcfNc0XutX/VvinqCQ3VumjdPz%2betlPKlvJdrC4Q7FY7Wc4JCkgYGPety3HXmhC08zSYZ9QbG7MekqignvksQR3x2oNvdP6paajbutnfNetCcPI0ew85IyMAdvge1Nao/hXqv61pt3evbpaTO4BtxA0bIoztLHsSeT9OQBirxQeJmZY2ZELsOyg4zSmJb%2b6iilhlWCLcCIz9R2/kf64pvLGssbI43KwwR81Al01lWJLOZreNX3lByDUuJcMRWHYKhLHAHc1kUVVaQ8PuntS0fxS6k6j1DTPIstf8ANYW4UN6YpKArO2cZkXc5x2zir34gyxah0Rq1nZxGe5uLdxFHCNxZwMjHt7CrVeWS3WMzXEX8MpT/ABUdtIQyI/q78bTu2i5YA855HuPbHxQI/Cp5I%2bhNEsbmGeG7s7KGKZJkKkMFx79%2b1W6iig//2Q==' /%3e%3c/svg%3e\" width=\"2133\" alt=\"merge2\" data-srcset=\"/assets/static/merge-2.82a2fbd.02edda7447db3b5c35230896116bb36e.jpg 480w, /assets/static/merge-2.cbab2cf.02edda7447db3b5c35230896116bb36e.jpg 1024w, /assets/static/merge-2.0605eb3.02edda7447db3b5c35230896116bb36e.jpg 2133w\" data-sizes=\"(max-width: 2133px) 100vw, 2133px\" data-src=\"/assets/static/merge-2.0605eb3.02edda7447db3b5c35230896116bb36e.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-2.0605eb3.02edda7447db3b5c35230896116bb36e.jpg\" width=\"2133\" alt=\"merge2\"></noscript></p>\n<p>This image below, shows the current state of blockmerge in testing. In this image there are 10 validator, which are receiving transaction from each other and are validating these.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2133 1600' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-84e9b19349f0edec263e7679ee19b487'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-84e9b19349f0edec263e7679ee19b487)' width='2133' height='1600' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAwAEADASIAAhEBAxEB/8QAHAAAAgMBAAMAAAAAAAAAAAAABAYABQcDAQII/8QANRAAAgECAwYEAwYHAAAAAAAAAQIDBBEABSEGEhMiMUEHUWGRMkKBFBUjcaHBJDNSVWKx0v/EABQBAQAAAAAAAAAAAAAAAAAAAAD/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwD6pxMCzvKq3R7ElgOTe6A9u/TCzmO0VfSMBeH5fipZeh87ftfAOGFjaLbKhyHMXpq2GbcSFZWlUra7CQqtibknhML2sCRf0XZPEyCnRRO9E8mlxFJID115WS4xW1vilkclSsvBpzUKthI6iRgAb2HKDa/r1wDps9tnQZ7Xx09IkiiWIujOygllVGdd29%2bXiKL9Lg/VnxjyeKuTQ1T1HCo45fgJChHYXv1NjY/XB7eLVFO6LRxkb19WZXPsp0HqTgNSxMZ3l/iEK6YLE1KFuoOpbqPTprhuyOvmrolllPKwFhwinY%2bZv28hgCqkb0YBFwS%2bm7vX0PbvjDdqqudRWRvxVUlgEYCK4t/TvFWB8wbegxucycQKnLzM45hcdD2xnWfbIRJHUIlVGXd7kQ0sQtfqSCwH7nAYZmOZyAJEtYVitqv2xCO3Xlvf9PPFa1S87MJZDKFuVViW%2bX0IHfGmZhsfIXj4M1RKALErNTRjsBrqfpilm8P6yYuqUu8xA/mzo1xu9wot6X/bXAJFPM0MZAV05r2RlQXt/kCfbBtNVKZafjqGIYH8RoTb2H64ZYvDrN/kytbAjmATpbub6a4sqLw%2bz9REooJ4rkabqafQA%2b/tgA9nZY5KwEtE2kY3rI99D3AHsB6Y3Hw3hEOSxAQCHXoKbg3%2bLtvEn664QMl2QziGtQ1FDXndVRvEQG1h0ve4/IdsaTsTRPQ5ekb0zU%2bvRqdIr9deRiD/ALwFxU09Qzk8ksVzaE8t7%2bZ1wNHlsUcpdcpogXN2sFuD3N93XFxiYCsSCVIxGtHCqrYghgL2N%2bltMdQ1UG3/ALMl7bu7xf1vbBNTEZ4WjWWSEm3PGRvDX1BGAvuyb%2b65h084/wDjAdCKkq8fBXdYk73E8zfpbHlmqiyuKZN5bgDi9b%2btscGyqYhR97ZiLWuQY9fz5MH0sTQQhHmkmIvzyW3j7ADAcFaqDt/DpZyCTxPh0A8tce1Nx/w1liVFQdQ976W8sFYmA//Z' /%3e%3c/svg%3e\" width=\"2133\" alt=\"merge3\" data-srcset=\"/assets/static/merge-3.82a2fbd.7a6b96ea2907cb9a635f397fdbb2524b.jpg 480w, /assets/static/merge-3.cbab2cf.7a6b96ea2907cb9a635f397fdbb2524b.jpg 1024w, /assets/static/merge-3.0605eb3.7a6b96ea2907cb9a635f397fdbb2524b.jpg 2133w\" data-sizes=\"(max-width: 2133px) 100vw, 2133px\" data-src=\"/assets/static/merge-3.0605eb3.7a6b96ea2907cb9a635f397fdbb2524b.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-3.0605eb3.7a6b96ea2907cb9a635f397fdbb2524b.jpg\" width=\"2133\" alt=\"merge3\"></noscript></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2133 1600' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e8a9822c538413dc3c6ea341aa302057'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e8a9822c538413dc3c6ea341aa302057)' width='2133' height='1600' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAwAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAABwADBAYIBQH/xAA5EAABAgQDBQMHDQAAAAAAAAABAgMABAURBhIhBwgTMUFRdbMiIzY3caGiFBgkJUJTYYGCksLS8P/EABYBAQEBAAAAAAAAAAAAAAAAAAABAv/EABYRAQEBAAAAAAAAAAAAAAAAAAARAf/aAAwDAQACEQMRAD8A1TChRQtsuNJzA2GJapU9uVcddm0y5EyhakgFC1ckkG/kiAvsVaq42kKVXV02cZmEFOQcUZSkkgE6XvYAi/t5ai4NTt%2bxOWgsyNCHkhVuG7/eIzm2yvvredfoeHVqNkqWqWWorSNRc5/cYRKPlFx1RaxUGZKTde47xPCC2SAsBAUTfpzI1tqDFojLDO3Guy5S41Q8OtKbuAUy6wU9CAQuHHd4nEbZR9AoigrrwXhb44Ra1HCgd7FMcz%2bPMPz0/U2JRhxia4CRLBQSRkSrXMSb3MESAUBbev8AV1I95t%2bG5BpgLb1/q6ke82/DcgMqoK2QoJJ8q10p5KH4xKcqKnXELVLglHI5lQ9SnnXEOhbji8oQlIKzoNdOY/3ZE1wFKcuUIAKk5eISix1Ivm0is1wZiYcdWoqJCTcBJ1sOz3wzHWqTSFAKAUVEm1hdR666mOUpCkWzpKSe0Whq41Rul%2bhFX7xPhIg4wDt0v0Iq/eJ8JEHGIpQP9teCp/HeFGKXS35Zh9ubRMZphSgmwSoW0BP2oIEKAyoN3bFySclWoyL2uEOugafoj35u%2bMNfrmk66nzz2vwRp2fRUFONmQelW0C%2bcPNKWT7CFC3WIwbreTWYp2a33Dlr/vgM2Dd5xiFAitUoEcjx3tPghte7ni1ZuurUZR7S66f4RqeUD4YSJtTS3upaSUp/IEk%2b%2bG5RM6l575W5LraJ82G21JUBfqSSDpblaAoexDA1RwFh2ekKtMSj7r82X0qliopCciU2OYDW4MEaFCgP/9k=' /%3e%3c/svg%3e\" width=\"2133\" alt=\"merge4\" data-srcset=\"/assets/static/merge-4.82a2fbd.6b91eb57baee1b7fe0991db814e455a4.jpg 480w, /assets/static/merge-4.cbab2cf.6b91eb57baee1b7fe0991db814e455a4.jpg 1024w, /assets/static/merge-4.0605eb3.6b91eb57baee1b7fe0991db814e455a4.jpg 2133w\" data-sizes=\"(max-width: 2133px) 100vw, 2133px\" data-src=\"/assets/static/merge-4.0605eb3.6b91eb57baee1b7fe0991db814e455a4.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-4.0605eb3.6b91eb57baee1b7fe0991db814e455a4.jpg\" width=\"2133\" alt=\"merge4\"></noscript></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2133 1600' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-50bbf11691047c3886449079b7fe20d6'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-50bbf11691047c3886449079b7fe20d6)' width='2133' height='1600' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAwAEADASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAAAAAAAAAAAUCAwQBBgj/xAAtEAACAQMDAgQGAgMAAAAAAAABAgMABBEFEiExUQYTQWEUFSJxgZEHMiNSYv/EABcBAQEBAQAAAAAAAAAAAAAAAAABAgP/xAAbEQADAQEBAQEAAAAAAAAAAAAAAQIRA0ESMf/aAAwDAQACEQMRAD8A%2bqaw63qKaVp0l3KjSBWRAqkAlnYKoyeAMsOT0rdUJoo54nimRZI3G1lYZBHYg0B5i38daNLdx2byul4WRWjVfMCFjjl1yuAcAkHHNSPjvw%2bNRNiLxjdicWzRiFyVkzjB445B/R7Gn0enWUT747S3R8AbliUHAxgdPYfqsEhl8%2bU/Ig%2b2Tcsm%2bL6yCcNycg85555NALrrx9oNpcSQ3FxPGySGLJt3wzA4O045xz%2bBUV/kDQWmgiE1x5s5AhU27gyE46cf9L17imtujXMirdaKsSlslnMb49QePcD81fHoumx38t6llbi6kCBpNgJ%2bj%2bv2x7UB3Q9Q%2ba6ZFd/Dy2%2b8sPLkIJGGIzkEgg4yD6jFb6z2EnmQZWERICQgHQjuK0VE9WlawKKKKpCu4njto98zbUzjOPWvP6tqGkX8MJOopHuO5XBcZAz/AKkYpveX4iZ4rcRy3C9Y2k2Y4yOcfb90nm1gyrFMbdckdFvto6%2b3B9OvfFAS0y%2b0vTDOJdRWSZzuckvj8AlsevSmxmGo2RfTrhcFsb8ZHB5FJ4NXaCSUi3jBcbjuv9/PYA9Oo6Uz0zVo7zCSGKOck4jSUSZHfIH3oDW0c3xELJKFhUEMm3%2b3auwJMs0zSyh42P0KBjaKuoqYTAoooqlCkPji41G08N3cukRF7gIclWw6D1ZRg5I7U%2brLfWKXmzfLcR7M48mZo8574PNdOVrnatrc8Ofbm%2bnOoTzV%2brwzeG5b2fRLSTVIRDdNGNybtx6dTwOT1I9M0zqiztVtVcLLNIGbd/lkL49hn0q%2bs3X1TpLNLzlxKlvc9Ciiismz/9k=' /%3e%3c/svg%3e\" width=\"2133\" alt=\"merge5\" data-srcset=\"/assets/static/merge-5.82a2fbd.4ec8090c7c85dd9985505115cbaf2255.jpg 480w, /assets/static/merge-5.cbab2cf.4ec8090c7c85dd9985505115cbaf2255.jpg 1024w, /assets/static/merge-5.0605eb3.4ec8090c7c85dd9985505115cbaf2255.jpg 2133w\" data-sizes=\"(max-width: 2133px) 100vw, 2133px\" data-src=\"/assets/static/merge-5.0605eb3.4ec8090c7c85dd9985505115cbaf2255.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-5.0605eb3.4ec8090c7c85dd9985505115cbaf2255.jpg\" width=\"2133\" alt=\"merge5\"></noscript></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2133 1600' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1c8470aba4364418c7a819fd89e3e430'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1c8470aba4364418c7a819fd89e3e430)' width='2133' height='1600' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAwAEADASIAAhEBAxEB/8QAGwAAAgIDAQAAAAAAAAAAAAAAAgQAAwEFBgj/xAAuEAABAwMCAwgBBQEAAAAAAAABAgMRAAQSBSETQWEGFBUiMVFxkTIHJEKBkmL/xAAWAQEBAQAAAAAAAAAAAAAAAAAAAQL/xAAaEQEBAQEAAwAAAAAAAAAAAAAAAREhEjHB/9oADAMBAAIRAxEAPwD1TSOt6ijStOcu3UKcCVIQEpIBKlqCUiTsBKhufSnqB5pt9pbTyEuNrGKkqEgj2INBzFv260Z27bs1urReFSEqbSniBBUY3WmUwDAJBjeiPbvs%2bNRNiLxRuw%2bLZTYZWSlyYg7bbg/R9jW%2bb06yaXm3aW6FwBklpIMCIHp0H1RmztivM27JXkFzwxOQmD87nfrQc5ddvtBtLhxm4uH21IcLUm3XClAwcTG8b/0KFP6gaCp5hoPXHFfIDKTbrBcJj02/6T6%2b4rpF2Vq5Odsyred2wd5mfT3pdvRdNbv3b1Flbi6cCApzAE%2bT8fiOlBnQ9Q8V0xq77u7b5lQ4bhBIhREyCQQYkHmIp%2bk9PukOhTaW%2bEEGEiIBHKKcqS7NWzEqVKpurZu5SkO8SEkkYOKRyjkRVRdSGqWLL6FvLZeddQ2pKUNPKbKgeWygJ6mqV6XYZNsrcuAuPKnvjoJH%2bt6MaLZgqI715hif3bvp/qhhq0tGrbMtBwFwgqC3FL36STH9UV4266wUW7gbWSPMRO3OlPBbPAI/dAdLp2fvLrVDuk6ahbaHHblKyMUjvroJ6/luetSmbyH3LdxVw0pLiQyEwtGP5e1FbtvIddLrubZIwTG6R886zaWzdqyGmeJiDPncUs/aiTV1MTErC8sFYRlG0%2bk1mpVVqCb4LSNV8M7r/KMpJjlO1JoGtC4X4eq37ttgHkrjrMmfraugLLZd4pQniRGUbx80dJxq2ZPfxowdV4p8RU2ljeO6hR%2bJP5fVFaJvRZqVZDTC8Y8ySsgnacj6%2b9bqqlW7Sng6W08QfyAg/dTOr5SzFomBlE84qVKlVh//2Q==' /%3e%3c/svg%3e\" width=\"2133\" alt=\"merge6\" data-srcset=\"/assets/static/merge-6.82a2fbd.e2e2512a95f321c36436a2e2df99ab6b.jpg 480w, /assets/static/merge-6.cbab2cf.e2e2512a95f321c36436a2e2df99ab6b.jpg 1024w, /assets/static/merge-6.0605eb3.e2e2512a95f321c36436a2e2df99ab6b.jpg 2133w\" data-sizes=\"(max-width: 2133px) 100vw, 2133px\" data-src=\"/assets/static/merge-6.0605eb3.e2e2512a95f321c36436a2e2df99ab6b.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-6.0605eb3.e2e2512a95f321c36436a2e2df99ab6b.jpg\" width=\"2133\" alt=\"merge6\"></noscript></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2133 1600' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-5ef2e18f3878d82ffc8d83606883d1e4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-5ef2e18f3878d82ffc8d83606883d1e4)' width='2133' height='1600' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAwAEADASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAABAUCAwYACP/EAC8QAAEDAwMDAwIFBQAAAAAAAAECAxEABCEFEhMxQVEGFHEiYRUjMpGhFyWBseH/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8A9U11B6lqVvp1ut%2b55diOvG0pw9uyQT3pUj1dpi9vH7g7iAJaKevzFBP1X6mtvTaLZd2y6tt5SgVoKQEAAZMkdyB/n4ld/UP0%2bhjluLl63AH1hxhQKFYlBx%2boSn9xTRWpWF%2btAdtUvFv60chaO09JEqwavQmxc5HBZM9NqiUtkkAzGD5zQJ3vX%2bgMtIccuXQ24pSW1BlR3wJMCJ64%2baZ%2bnvUumeoDcDSny9wbd52EAbhiCevQjHii3NP09xSVOWNspSz1LKSZiM48CKvtmLdha027LbRITu2ICZxA6eAKC%2buqHKnj35j/ALFS3DcE9yJoANSN8LZ/8NTbKezHuFKCe3geJrLFesKbIeZtSNw3hpS1R8BUfxT71GuwRp9wdSvXbRnutp5TZGRmU56xWQaOluoRwalcXCgpOz8xTs/Mpx/NAwKQVA3QcCCnCkNoJmTOd1S2adyPcqrkO5xxtgHH2xXMMucs29tyK25C7VJxJjMUY2jUEpeCLBnjJVksJBGPG6goSNEDTZ9xd7AsSTIIwY6CaNaOkC4EXVxlKdsOOCevWKtSvVwlk%2bwtQsKEDdAOD3nFFtO6n7hU2ttlKd35xEdfsaAdldhwqCHniuTILjnntTOyLJI9uta0wcqUont5oZC7w2xCmWAmTkOmT9XjbRrJdLg5kIQqDhKt3j7CgG1J27atX1WFq3cu5hDjvGD07we1ZNb1%2b6g8%2bmW%2b0KTvl0Ocfx0itje2RukKR7m4ZSrrwqCT%2b8TQv4FbkIC3rxe0g/VcLzHwaDM8TZWOZIaG39SbaZycSFVali0Cngbt5tYn8sW5A6eK0idEsAsq4lHEQpxR/wBmpp0ixSlQFs1mclMxNBn0jTg01/ebkI3iVbiCnB6GMUY2qwFyZ1l8HYmJfA3DP2pz%2bH2o27bdkQZwgZxFWJtmkrKktoGAI2jEUChlVrwq26ktSpMoLwMZ8Uys%2bORxXBfTB%2borCo6d6uDCQ1sH7x95qYQAqRjBoP/Z' /%3e%3c/svg%3e\" width=\"2133\" alt=\"merge7\" data-srcset=\"/assets/static/merge-7.82a2fbd.e40f7b88f9b54cc27f19ef5de7a54792.jpg 480w, /assets/static/merge-7.cbab2cf.e40f7b88f9b54cc27f19ef5de7a54792.jpg 1024w, /assets/static/merge-7.0605eb3.e40f7b88f9b54cc27f19ef5de7a54792.jpg 2133w\" data-sizes=\"(max-width: 2133px) 100vw, 2133px\" data-src=\"/assets/static/merge-7.0605eb3.e40f7b88f9b54cc27f19ef5de7a54792.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-7.0605eb3.e40f7b88f9b54cc27f19ef5de7a54792.jpg\" width=\"2133\" alt=\"merge7\"></noscript></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2133 1600' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-024bc78e2092a492a5e129f95b7bd5e8'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-024bc78e2092a492a5e129f95b7bd5e8)' width='2133' height='1600' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAwAEADASIAAhEBAxEB/8QAGAABAQADAAAAAAAAAAAAAAAAAAYEBQj/xAAlEAABBAIBBAIDAQAAAAAAAAABAAIDBAUREgYhMUEiURMjMkL/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8A6pREQEREBERAREQEREE91RaztWzXOEhhniMb3SMkic7bgW8RyDhx3yd6P8rTSdWdRSNtNr9JWmyRM20yPOnHsND4jfc78jsPtXSIJC31Vk4nVYosBYfYkqtsys5n9B5cSwgNJJB1rQOxs%2bAs/AZjJ5O%2b9tvEy4%2buyL5CYEuMmx2B8EAex59dlQIgIiICIiAp7JZD8GTmhORtQ9h8GUTI1ux6fxIP2qFEE5ib7pr0UZydqfkTpj6BiBGj/riNKjREBERB/9k=' /%3e%3c/svg%3e\" width=\"2133\" alt=\"merge8\" data-srcset=\"/assets/static/merge-8.82a2fbd.d2adf5cc929ed3eb630b85ac8b2bbe80.jpg 480w, /assets/static/merge-8.cbab2cf.d2adf5cc929ed3eb630b85ac8b2bbe80.jpg 1024w, /assets/static/merge-8.0605eb3.d2adf5cc929ed3eb630b85ac8b2bbe80.jpg 2133w\" data-sizes=\"(max-width: 2133px) 100vw, 2133px\" data-src=\"/assets/static/merge-8.0605eb3.d2adf5cc929ed3eb630b85ac8b2bbe80.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-8.0605eb3.d2adf5cc929ed3eb630b85ac8b2bbe80.jpg\" width=\"2133\" alt=\"merge8\"></noscript></p>\n",author:[],excerpt:"The biggest problem with current blockchain technology is, that it is not scaling."}},{node:{id:"8f533b37695283efb97cc9e1c21e3796",title:"Greg Meredith joins talks at perm winter school",path:"/blog/2021/02/11/rchain/",date:"11. February 2021",timeToRead:1,content:'<p>Greg Meredith from Rchain will speak about decentralized governance at perm winter school on 25.2.21 from 20:00 - 20:00. Join them if you like <a href="https://permwinterschool.ru/" target="_blank" rel="nofollow noopener noreferrer">website</a>.</p>\n<p>Perm Winter School is a community of bright students, forward-looking academicians, and innovative industry practitioners in the area of financial markets and latest financial technologies. Every winter the school\'s comprehensive program covers the latest empirical researches, theoretical models, and industry best practices. In 2021 Perm Winter Scool will be held online.</p>\n',author:[],excerpt:"Greg Meredith from Rchain is talking on decentralized governance at perm winter school."}},{node:{id:"fe8db5d09b310cab8771732caa269492",title:"Rholang is available on Codesandbox.io 💥",path:"/blog/2021/02/10/rholang-codesandbox/",date:"10. February 2021",timeToRead:1,content:'<h1 id="getting-started"><a href="#getting-started" aria-hidden="true"><span class="icon icon-link"></span></a>Getting started</h1>\n<p>To see the dapp tutorial visit <a href="https://rholang.github.io/dapps/intro-dapps" target="_blank" rel="nofollow noopener noreferrer">dapp tutorial</a>.</p>\n<p><img class="g-image g-image--lazy g-image--loading" src="data:image/svg+xml,%3csvg fill=\'none\' viewBox=\'0 0 845 626\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\'%3e%3cdefs%3e%3cfilter id=\'__svg-blur-fab09b19e6677f845e4f5f8b62de238d\'%3e%3cfeGaussianBlur in=\'SourceGraphic\' stdDeviation=\'40\'/%3e%3c/filter%3e%3c/defs%3e%3cimage x=\'0\' y=\'0\' filter=\'url(%23__svg-blur-fab09b19e6677f845e4f5f8b62de238d)\' width=\'845\' height=\'626\' xlink:href=\'data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAvCAYAAABTy8xRAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAH9UlEQVRo3u1aWW8U2RWel0hILAIs9l0iQoJH3nhD8IQQPyX/ZDTS5CFSlMwoi5xRCFEsswiQ5yHyhAloYEC43e3eqqpr6X3f2%2b0z33e6CxrLEGO7uluRSzq6t6qr6t773XO%2bs1R/IZs41tbWtC2VSvL48WOVR48eyZMnT1SePn36rj9u4VwWFhak0%2bl8MNfNHl9s5qbV1VVtFxcX5eTJk3Lr1i25fv26HDlyRPbt2yeHDx%2bWc%2bfOyaFDh2Tv3r2yf//%2bD%2bTAgQOBCcc7evSo5PN5nWO/3w8OgOfPn8vMzIycPXtWzpw5IydOnFDh%2bYULF%2bT8%2bfNy8eJFBYPC65TTp0/vmJw6dUqFfc6B/UuXLkmxWAwegGfPnsmePXve7ezBgwdVLl%2b%2bLHfu3JEbN27I7du35ebNmyq8dvXqVTl27NgHk9%2bq8B3Hjx9XUAn0lStXdPHXrl2TarUanAn4Ly0UCjI3Nyf379%2bX%2bfl5bWn/5IOHDx%2b%2bax88eKDic4Uv/vXtCseljPbb7XZwAHzqxSnLkk63t6H61ep1Gdfha2mgGsCWA/V6Pe3XajX5w%2b9/J3fv3pO5f83Jt9/%2bSb6b/Zvcu/cPWfh%2bQf7817/g/Dv55ps/yuzsrJTKVTzXlx4A4zu2IhzfF54TdKp/t9sNVgM2qxE8fELi0W61pL6DmjA6rt9vNBoKxtgA8AdpdXqysJSWYrkolUpVGvWGVLAbdUgRbqlWq0oTk6tUKoghCtCAEn6vSLk4uL9WrUmlVJYyfq%2bolLWlZnFX67U63lnXPq%2b1mq3hBAZzmDgAjXZXZv8dkXgiISnbEcuy0doSi0QkurIitmVIKmVLNBqTRDyKNiqJZEJWwssSi0X1uXh0RaKx2OA53Jc0DInjfAXPu44rhpGUZDKJ%2b2NiGpZUAYTPNRMHgIN6VkISWIjlOGK7EDsllmmKnXJ00cmEgWu2FBFFliHFYklyuYyUoTWZTBZ9Sk7aiORyuTx%2bL4iDd7meJ/lCXrL4vQQtyaQ9XMtIOpOZHgBIROVyRXL5nDieq4uhCpMDcuksFmJjFx1Je2npf%2bbENjOHiQAwOjB3IpvNao5Al1culzVWoN1v9Fx/%2bCyf81tfRs/9MT4lU6EBnOxyaBn2GhETts42AvvPQ6V3aoenDoDRwQkAB2Ymxkis3WlLD2bBfrPZUPfXHLrBKkyj1e5Ip91SbWnhOr0EPUcd0sZvtXpN2X7qTUDtH4uvwT2lQHiWmRLDTEoYGpA0TFkBs1uIEONgfRNtMhGXyFJI3HQaxOfBG6zo/QbIM7wcAsPHwfQmPERcPUOjAffXbCpIFC6QbRPX6hssdmIa0Go1xbHp%2blIQS0nPgikksKA0GN6Cy4ssLasXcFIWfktJGkSZ8egt4NIQGeayOXHhQpMAxANZ5vIF9QoW7k/DE3ggV9My8b40XKqlbrJarU0JB6z2sdMpcdLw1/DVdG8WJuthp234cNclGDFJ49zB4qnq/xdeYOAC%2bxqlJaDeFnaYQY8BMAyoseMAFNdDomRqFLc2wv4ax4%2bwvx/X99dd6087CXKitMkk1JwApExDucDGTmcQrDCCo%2bpnoMYxcoEJE4B9U1McXKOKm7ifZhGJxjVCjMYGLQMrhsef8gZTAQDZPgWbJAcwtCXxua6rvMAIzsJvDqJDL%2b0pN9CeSZBmasAXBqJEMwngUuYADNuF6dj6HgPaQyL8GAhTAQAHtnRHXewedg5SQBKUwDVqQZI5AsxCtQTegloSjUYkDBAYMicZMmOxsXhCuYSgMe5n/hCPw5QA3FS7QUZ8XAiJjuxMm6fqx%2bHSPM/GrhpKhnRzcchKlAkN3B8WHo0M8oQsGN8Aj%2bjzMAcDYMQJKjSHQNjKK4ZqURagEtDupN3gqBZw8hbsu8siR7erZtHpdDGhrhYp2sMgqdUaSBfnDJyY2jL44T2d4bXOu3tbI%2beDWID38Vn2%2b/0JmcB622Nizgn6g0/qCByA0YX7Sc3qsK%2blqXW76Ivu2lDWn%2b%2bE8J0%2bFwVaElsbvFnWv3oVqDMT7HTf5wJd9LtDVebEfPFDWuYFo9e3I8wbmH7THQdbE9TdHkDRb9XlZ9OTu0spHZQJTaVc0fCUqTErQyxoZNCnWvKe3hCoz/1osVn1D1wDekPS%2bfqFITP/dOVX97Iy83cwfb6otb9wKKxJzKtXP8vzFy/l5auXEg6H1e8z4PEQG4RCITC7qzWDKuuHjabu3HaEC2ekGbgGrA4BeBRNy1evMzIfduSHZEY1IpvJaamL6lgsFQc7ggl1YAKsC9C3M2vMQSMyAEsn33jP5Ns5yAHUrOBNgC5vgxfTH7MCFFTR43/lAgSAGhU4AO%2bDnzU1B7b9YVHUB2Cri1jbQq1w7AB8LA7YCIBxHBMDYKOy%2bC4AuwDsArALwC4AuwBsL6iZ%2bkBoMwBM4hhrKPyxQEjTYf/T2FD8LzpBCsfh7jMd5vhjLYisDWsDHJT5vf9/Hb9QMS4zYHrNJMz/rhB8LoC2N/J%2bfgjNZTOyvPRWXr1%2brQVOfgsYJxmOBYAPs8GetKslSaTzrIrqX1a0BNbtDL7y9FY/rTk7SIJjA8CvBzyIZuTO9578et6TU3eT4uaLUsrn5M2b1/Ljj/%2bV0FJIlkJvZXHxB3nzdknLY1vN%2bDZrkiyIBA6AXxH67Yuk3Hzqym/%2b48iXP9nSX%2b1pAaRQyOuHEP41hqTIfh7eYat/XvwcAEiG/r9KtjLWL1pktiGc1rdLAAAAAElFTkSuQmCC\' /%3e%3c/svg%3e" width="845" alt="view" data-srcset="/assets/static/rho-view.82a2fbd.3b1cea23ca8ebf56d4e5956683c6b6ab.png 480w, /assets/static/rho-view.3fb7b9b.3b1cea23ca8ebf56d4e5956683c6b6ab.png 845w" data-sizes="(max-width: 845px) 100vw, 845px" data-src="/assets/static/rho-view.3fb7b9b.3b1cea23ca8ebf56d4e5956683c6b6ab.png"><noscript><img class="g-image g-image--lazy g-image--loaded" src="/assets/static/rho-view.3fb7b9b.3b1cea23ca8ebf56d4e5956683c6b6ab.png" width="845" alt="view"></noscript></p>\n',author:[],excerpt:"Write your own dapps is now easier than ever. Use Codesandbox.io with the rholang template to evaluate your code in real-time and see the result on the real network."}}]}},x=function(n){var s=n.options;s.__staticData?s.__staticData.data=C:(s.__staticData=e.a.observable({data:C}),s.computed=v({$static:function(){return s.__staticData.data}},s.computed))},B=Object(o.a)(y,(function(){var n=this.$createElement,s=this._self._c||n;return s("Section",{attrs:{dots:"true",secondary:"true"}},[s("div",{staticClass:"container text-center container-sm mb"},[s("h2",[this._v("Latest from Rholang blog")])]),s("div",{staticClass:"blog-posts container container-md"},this._l(this.$static.posts.edges,(function(n){return s("PostCard",{key:n.node.id,attrs:{post:n.node}})})),1)])}),[],!1,null,null,null);"function"==typeof x&&x(B);var M=B.exports,K={components:{PostMeta:a("n6yM").a},props:["link"]},D=(a("IXl8"),{props:["icon"],components:{VueLogo:d,GraphQlLogo:k,FeatureCard:Object(o.a)(K,(function(){var n=this.$createElement;return(this._self._c||n)("Card",{staticClass:"feature-posts__post",attrs:{link:this.link}},[this._t("default")],2)}),[],!1,null,null,null).exports},computed:{iconClasses:function(){return[]}}}),E=(a("so9u"),Object(o.a)(D,(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("Section",{attrs:{dots:"true"}},[a("div",{staticClass:"homepage-features grid-cols",staticStyle:{"grid-template-columns":"repeat(auto-fit, minmax(50%, 1fr))"}},[a("Feature",[a("h3",[n._v("The language you've been waiting for")]),a("p",{staticStyle:{"text-align":"left"}},[n._v("\n        Rholang is build on the latest research on concurrent languages. Up to\n        now all functional languages are built on the lambda calculus. With\n        Rholang we built a new language on top of the reflective high order\n        calculus (rho-calculus). This leads to a full concurrent language,\n        with a very simple and safe way for developers to write concurrent\n        code. Rholang is a new calculus from research led by Greg Meredith\n        inspired from the pi-calculus.\n      ")])]),a("Feature",[a("h3",[n._v("A new consensus layer")]),a("p",{staticStyle:{"text-align":"left"}},[n._v("\n        Most blockchains are running serial like a chain, with that,\n        throughput is very limited. Rchain is using DAGs (directed acyclic\n        graphs) that have a tree like structure and scale massively. Further\n        Rchain uses proof of stake from research led by Greg Meredith, Kent\n        Shikama, Christian Williams and Vlad Zamfir. The research solves\n        current problems in Pos (Proof of stake) algorithms. Additional\n        Rholang code is fully verified and the whole Rchain project code is\n        written in Scala. With that Rholang is currently the only language,\n        where the DAO Bug with Ethereum would have not happened.\n      ")])]),a("Feature",[a("h3",[n._v("A large community")]),a("p",{staticStyle:{"text-align":"left"}},[n._v("\n        The community for Rholang is the Rchain community. Rchain is founded\n        as a cooperative with the democratic thinking in mind - one member -\n        one vote. With more than 1500 registered members, Rchain elects new\n        board seats and functions as a decentralized cooperation.\n      ")])]),a("Feature",[a("h3",[n._v("Build for dApp developers")]),a("p",{staticStyle:{"text-align":"left"}},[n._v("\n        The Rholang developer ecosystem is growing. With a new type-safe api,\n        dApps can be written for Rchain. Many dApps like RChain-Status, Dappy,\n        MyRchainWallet, nth-caller-game, RSign, RCat and many more are\n        developed by the community. Tutorials and an upgraded RNode API makes\n        it easy for new developer to come onboard.\n      ")])])],1),a("div",{staticClass:"grid-cols grid-cols--2 grid-cols--gap-small grid-cols--full-md"},[a("FeatureCard",{attrs:{link:"/docs"}},[a("h3",[n._v("📝Documentation")]),a("p",[n._v("Everything you need to get up and running.")])]),a("FeatureCard",{attrs:{link:"/tutorials"}},[a("h3",[n._v("📔 Tutorials")]),a("p",[n._v("Read tutorials from the community and learn Rholang")])]),a("FeatureCard",{attrs:{link:"https://rchain.atlassian.net/wiki/spaces/CORE/overview"}},[a("h3",[n._v("📢 Development updates")]),a("p",[n._v("Read the latest development updates")])]),a("FeatureCard",{attrs:{link:"https://developer.rchain.coop/"}},[a("h3",[n._v("🌟 Rchain Developer Page")]),a("p",[n._v("Ressources for developer")])]),a("FeatureCard",{attrs:{link:"https://blog.rchain.coop"}},[a("h3",[n._v("🚩 Rchain Blog")]),a("p",[n._v("Keep up to date with new blog posts")])]),a("FeatureCard",{attrs:{link:"https://www.youtube.com/channel/UCSS3jCffMiz574_q64Ukj_w"}},[a("h3",[n._v("📹 Youtube Development Updates")]),a("p",[n._v("Watch every Wednesday the development updates from Rchain")])]),a("FeatureCard",{attrs:{link:"https://www.youtube.com/channel/UCi8byRkpJBbGgDot2pWXLHA/videos"}},[a("h3",[n._v("📹 CASPER Development Research")]),a("p",[n._v("Watch the latest research development led by Greg Meredith")])]),a("FeatureCard",{attrs:{link:"https://rchain.atlassian.net/wiki/spaces/DOC/pages/3014657/Reading+List"}},[a("h3",[n._v("📔 Blockchain 101")]),a("p",[n._v("Get into Blockchain for starters")])]),a("FeatureCard",{attrs:{link:"https://try-rholang-22.netlify.app/"}},[a("h3",[n._v("☁️ Rholang Cloud")]),a("p",[n._v("Try to write Rholang code and compile it online")])]),a("FeatureCard",{attrs:{link:"https://myrchainwallet.com"}},[a("h3",[n._v("💼 Rchain Wallet")]),a("p",[n._v("Community driven Rchain Wallet")])]),a("FeatureCard",{attrs:{link:"https://wenode.io/rui/"}},[a("h3",[n._v("💼 Rui Wallet")]),a("p",[n._v("China community driven Rchain Wallet for chrome")])]),a("FeatureCard",{attrs:{link:"https://icapo.app/"}},[a("h3",[n._v("💼 Capo Wallet")]),a("p",[n._v("Community driven Rchain Wallet for android")])]),a("FeatureCard",{attrs:{link:"http://app.onechain.one/appstart_en.html"}},[a("h3",[n._v("💼 ONE Wallet")]),a("p",[n._v("Community driven Rchain Wallet for android")])]),a("FeatureCard",{attrs:{link:"http://revdefine.io/"}},[a("h3",[n._v("📡 Rchain Blockchain Explorer")]),a("p",[n._v("Watch the network live")])])],1)])}),[],!1,null,null,null).exports),S={data:function(){return{current:0}}},Q=(a("7XMK"),e.a.config.optionMergeStrategies.computed),R={examples:{edges:[{node:{title:"Hello World Example",content:'<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">helloworld</span><span class="token punctuation">,</span> <span class="token function">stdout</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rho:io:stdout</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n  contract <span class="token function">helloworld</span><span class="token punctuation">(</span> world <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span> @msg <span class="token operator">&lt;</span><span class="token operator">-</span> world <span class="token punctuation">)</span>\n    <span class="token punctuation">{</span> stdout<span class="token operator">!</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token operator">|</span> <span class="token keyword">new</span> <span class="token class-name">world</span><span class="token punctuation">,</span> world2 <span class="token keyword">in</span> <span class="token punctuation">{</span>\n      helloworld<span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>world<span class="token punctuation">)</span>\n    <span class="token operator">|</span> world<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>\n    <span class="token operator">|</span> helloworld<span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>world2<span class="token punctuation">)</span>\n    <span class="token operator">|</span> world2<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"Hello World again"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span></code></pre>\n',id:"5ec52ee690b2a5f89c89c05261e618e8",filepath:"hello-world.rho"}},{node:{title:"Managing Ressources (Content)",content:'<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Ressources contract</span>\n<span class="token comment">// store song &amp; metadata, including artists to remunerate; return songid</span>\n<span class="token comment">// retrieve song given songid</span>\n<span class="token comment">// retrieve set of songs, metadata, &amp; corresponding songids</span>\n<span class="token comment">// get new userid with 50 plays</span>\n<span class="token comment">// play(songid, userid): if (remaining user plays > 0) { decrement user plays, increment song plays, return allowed } else { return denied }</span>\n<span class="token comment">// getPlaysRemaining(userid)</span>\n\n\n<span class="token keyword">new</span> <span class="token class-name">metaDataMapStore</span><span class="token punctuation">,</span> songMapStore<span class="token punctuation">,</span> userMapStore<span class="token punctuation">,</span> remunerate<span class="token punctuation">,</span> <span class="token function">testLog</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rho:io:stderr</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Maps songId to [metadata, songDataId]</span>\n  metaDataMapStore<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n  <span class="token comment">// Maps songDataId to songData</span>\n  songMapStore<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n  <span class="token comment">// Maps userId to remaining play count</span>\n  userMapStore<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n\n  <span class="token comment">// songDataIn: arbitrary, usually bytearray</span>\n  <span class="token comment">// songMetaDataIn: map with</span>\n  <span class="token comment">//  "Title Name" - title of song</span>\n  <span class="token comment">//  "Artist Name" - artist of song</span>\n  <span class="token comment">//  "songWriters" key with a list of [</span>\n  <span class="token comment">//    "pubKey" - ed25519 public key (ByteArray of length 32)</span>\n  <span class="token comment">//    "share" - int between 0 and 100: percent of revenue share</span>\n  <span class="token comment">//    "name" - display name for this songwriter</span>\n  <span class="token comment">//  ]</span>\n  <span class="token comment">// songIdOut: name on which new songId (ByteArray) gets sent</span>\n  contract @<span class="token punctuation">[</span><span class="token string">"Ressources"</span><span class="token punctuation">,</span> <span class="token string">"store"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>@songDataIn<span class="token punctuation">,</span> @songMetadataIn<span class="token punctuation">,</span> songIdOut<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token class-name">songId</span><span class="token punctuation">,</span> songDataId <span class="token keyword">in</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span>@metaDataMap <span class="token operator">&lt;</span><span class="token operator">-</span> metaDataMapStore<span class="token punctuation">;</span> @songMap <span class="token operator">&lt;</span><span class="token operator">-</span> songMapStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        metaDataMapStore<span class="token operator">!</span><span class="token punctuation">(</span>metaDataMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token operator">*</span>songId<span class="token punctuation">.</span><span class="token method function property-access">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>songMetadataIn<span class="token punctuation">,</span> <span class="token operator">*</span>songDataId<span class="token punctuation">.</span><span class="token method function property-access">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n        songMapStore<span class="token operator">!</span><span class="token punctuation">(</span>songMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token operator">*</span>songDataId<span class="token punctuation">.</span><span class="token method function property-access">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> songDataIn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n        songIdOut<span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>songId<span class="token punctuation">.</span><span class="token method function property-access">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n  <span class="token comment">// songIdIn: bytearray</span>\n  <span class="token comment">// songDataOut: name on which songData gets sent</span>\n  contract @<span class="token punctuation">[</span><span class="token string">"Ressources"</span><span class="token punctuation">,</span> <span class="token string">"retrieveSong"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>@songIdIn<span class="token punctuation">,</span> songDataOut<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>@metaDataMap <span class="token operator">&lt;</span><span class="token operator">-</span> metaDataMapStore<span class="token punctuation">;</span> @songMap <span class="token operator">&lt;</span><span class="token operator">-</span> songMapStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      metaDataMapStore<span class="token operator">!</span><span class="token punctuation">(</span>metaDataMap<span class="token punctuation">)</span> <span class="token operator">|</span>\n      songMapStore<span class="token operator">!</span><span class="token punctuation">(</span>songMap<span class="token punctuation">)</span> <span class="token operator">|</span>\n      songDataOut<span class="token operator">!</span><span class="token punctuation">(</span>songMap<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>metaDataMap<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>songIdIn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">nth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n  <span class="token comment">// metaDataMapOut: name on which to send map from song ids to metadata</span>\n  contract @<span class="token punctuation">[</span><span class="token string">"Ressources"</span><span class="token punctuation">,</span> <span class="token string">"retrieveMetaData"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>metaDataMapOut<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>@metaDataMap <span class="token operator">&lt;</span><span class="token operator">-</span> metaDataMapStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      metaDataMapStore<span class="token operator">!</span><span class="token punctuation">(</span>metaDataMap<span class="token punctuation">)</span> <span class="token operator">|</span>\n      metaDataMapOut<span class="token operator">!</span><span class="token punctuation">(</span>metaDataMap<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n  <span class="token comment">// userIdOut: name on which to send new user id (ByteArray)</span>\n  contract @<span class="token punctuation">[</span><span class="token string">"Ressources"</span><span class="token punctuation">,</span> <span class="token string">"newUserId"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>userIdOut<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token class-name">userId</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span>@userMap <span class="token operator">&lt;</span><span class="token operator">-</span> userMapStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        userMapStore<span class="token operator">!</span><span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token operator">*</span>userId<span class="token punctuation">.</span><span class="token method function property-access">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n        userIdOut<span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>userId<span class="token punctuation">.</span><span class="token method function property-access">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n  <span class="token comment">// songIdIn: bytearray</span>\n  <span class="token comment">// userIdIn: bytearray</span>\n  <span class="token comment">// permittedOut: boolean</span>\n  contract @<span class="token punctuation">[</span><span class="token string">"Ressources"</span><span class="token punctuation">,</span> <span class="token string">"play"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>@songIdIn<span class="token punctuation">,</span> @userIdIn<span class="token punctuation">,</span> permittedOut<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>@metaDataMap <span class="token operator">&lt;</span><span class="token operator">-</span> metaDataMapStore<span class="token punctuation">;</span> @userMap <span class="token operator">&lt;</span><span class="token operator">-</span> userMapStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      metaDataMapStore<span class="token operator">!</span><span class="token punctuation">(</span>metaDataMap<span class="token punctuation">)</span> <span class="token operator">|</span>  <span class="token comment">// peek</span>\n\n      <span class="token keyword">new</span> <span class="token class-name">playsRemainingOut</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n        playsRemainingOut<span class="token operator">!</span><span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>userIdIn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>@playsRemaining <span class="token operator">&lt;</span><span class="token operator">-</span> playsRemainingOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">new</span> <span class="token class-name">mdOut</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n            mdOut<span class="token operator">!</span><span class="token punctuation">(</span>metaDataMap<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>songIdIn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>@md <span class="token operator">&lt;</span><span class="token operator">-</span> mdOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>playsRemaining <span class="token operator">==</span> <span class="token maybe-class-name">Nil</span> or playsRemaining <span class="token operator">==</span> <span class="token number">0</span> or md <span class="token operator">==</span> <span class="token maybe-class-name">Nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                userMapStore<span class="token operator">!</span><span class="token punctuation">(</span>userMap<span class="token punctuation">)</span> <span class="token operator">|</span>\n                permittedOut<span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                userMapStore<span class="token operator">!</span><span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>userIdIn<span class="token punctuation">,</span> playsRemaining <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n                <span class="token comment">// ISSUE: we assume this succeeds; i.e. that metadata</span>\n                <span class="token comment">// supplied to "store" is correct.</span>\n                remunerate<span class="token operator">!</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token method function property-access">nth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token maybe-class-name">Nil</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n                permittedOut<span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n  <span class="token comment">// userIdIn: bytearray</span>\n  <span class="token comment">// countOut: name on which the reamining play count is sent</span>\n  contract @<span class="token punctuation">[</span><span class="token string">"Ressources"</span><span class="token punctuation">,</span> <span class="token string">"playCount"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>@userIdIn<span class="token punctuation">,</span> countOut<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>@userMap <span class="token operator">&lt;</span><span class="token operator">-</span> userMapStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      userMapStore<span class="token operator">!</span><span class="token punctuation">(</span>userMap<span class="token punctuation">)</span> <span class="token operator">|</span>\n      countOut<span class="token operator">!</span><span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>userIdIn<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n  <span class="token keyword">new</span> <span class="token class-name">mintStore</span><span class="token punctuation">,</span> pubKeyToPurseStore<span class="token punctuation">,</span> showBalances<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rho:io:stderr</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    @<span class="token string">"MakeMint"</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>mintStore<span class="token punctuation">)</span> <span class="token operator">|</span>\n    pubKeyToPurseStore<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n\n    debug<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"contract remunerate..."</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n    contract <span class="token function">remunerate</span><span class="token punctuation">(</span>@metaData<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      debug<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"remunerate:"</span><span class="token punctuation">,</span> metaData<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"Title Name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"by"</span><span class="token punctuation">,</span> metaData<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"Artist Name"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n\n      <span class="token keyword">new</span> <span class="token class-name">payEach</span><span class="token punctuation">,</span> payOne<span class="token punctuation">,</span> newKeysOut <span class="token keyword">in</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>@start <span class="token operator">&lt;</span><span class="token operator">-</span> pubKeyToPurseStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          payEach<span class="token operator">!</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"songwriters"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span> <span class="token operator">|</span>\n          <span class="token keyword">for</span> <span class="token punctuation">(</span>@newKeys <span class="token operator">&lt;</span><span class="token operator">-</span> newKeysOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            showBalances<span class="token operator">!</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"songwriters"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token maybe-class-name">Nil</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n            pubKeyToPurseStore<span class="token operator">!</span><span class="token punctuation">(</span>newKeys<span class="token punctuation">)</span> <span class="token operator">|</span>\n            done<span class="token operator">!</span><span class="token punctuation">(</span><span class="token maybe-class-name">Nil</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n          contract <span class="token function">payEach</span><span class="token punctuation">(</span>@writers<span class="token punctuation">,</span> @current<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            <span class="token comment">// debug!(["payEach:", writers, current]) |</span>\n            match writers <span class="token punctuation">{</span>\n              <span class="token punctuation">[</span>artist<span class="token punctuation">,</span> <span class="token spread operator">...</span>rest<span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">new</span> <span class="token class-name">newPurseMapOut</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n                  payOne<span class="token operator">!</span><span class="token punctuation">(</span>artist<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token operator">*</span>newPurseMapOut<span class="token punctuation">)</span> <span class="token operator">|</span>\n                  <span class="token keyword">for</span> <span class="token punctuation">(</span>@newPurseMap <span class="token operator">&lt;</span><span class="token operator">-</span> newPurseMapOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    payEach<span class="token operator">!</span><span class="token punctuation">(</span>rest<span class="token punctuation">,</span> newPurseMap<span class="token punctuation">)</span>\n                  <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n              <span class="token punctuation">}</span>\n              <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                newKeysOut<span class="token operator">!</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span> <span class="token operator">|</span>\n          contract <span class="token function">payOne</span><span class="token punctuation">(</span>@artist<span class="token punctuation">,</span> @current<span class="token punctuation">,</span> purseMapOut<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            <span class="token comment">// debug!(["payOne:", artist]) |</span>\n            <span class="token keyword">new</span> <span class="token class-name">maybeMyPurseOut</span><span class="token punctuation">,</span> myPurseOut<span class="token punctuation">,</span> paymentPurseOut<span class="token punctuation">,</span> newPurseMapOut <span class="token keyword">in</span> <span class="token punctuation">{</span>\n              <span class="token keyword">for</span> <span class="token punctuation">(</span>@mint <span class="token operator">&lt;</span><span class="token operator">-</span> mintStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                mintStore<span class="token operator">!</span><span class="token punctuation">(</span>mint<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token comment">// peek</span>\n                @<span class="token punctuation">[</span>mint<span class="token punctuation">,</span> <span class="token string">"makePurse"</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">(</span>artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"share"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>paymentPurseOut<span class="token punctuation">)</span> <span class="token operator">|</span>\n\n                maybeMyPurseOut<span class="token operator">!</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"pubKey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span>@maybeMyPurse <span class="token operator">&lt;</span><span class="token operator">-</span> maybeMyPurseOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  <span class="token keyword">if</span> <span class="token punctuation">(</span>maybeMyPurse <span class="token operator">==</span> <span class="token maybe-class-name">Nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    @<span class="token punctuation">[</span>mint<span class="token punctuation">,</span> <span class="token string">"makePurse"</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>myPurseOut<span class="token punctuation">)</span> <span class="token operator">|</span>\n                    <span class="token keyword">for</span> <span class="token punctuation">(</span>@peek <span class="token operator">&lt;</span><span class="token operator">-</span> myPurseOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                      debug<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"new purse for:"</span><span class="token punctuation">,</span> artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n                      myPurseOut<span class="token operator">!</span><span class="token punctuation">(</span>peek<span class="token punctuation">)</span> <span class="token operator">|</span>\n                      newPurseMapOut<span class="token operator">!</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"pubKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> peek<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n\n                      <span class="token comment">// publish their wallet at their public key</span>\n                      @<span class="token string">"BasicWallet"</span><span class="token operator">!</span><span class="token punctuation">(</span>peek<span class="token punctuation">,</span> <span class="token string">"ed25519"</span><span class="token punctuation">,</span> artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"pubKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"pubKey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// debug!(["already have purse for:", artist.get("name")]) |</span>\n                    myPurseOut<span class="token operator">!</span><span class="token punctuation">(</span>maybeMyPurse<span class="token punctuation">)</span> <span class="token operator">|</span>\n                    newPurseMapOut<span class="token operator">!</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>\n                  <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span> <span class="token operator">|</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span>@myPurse <span class="token operator">&lt;</span><span class="token operator">-</span> myPurseOut<span class="token punctuation">;</span> @paymentPurse <span class="token operator">&lt;</span><span class="token operator">-</span> paymentPurseOut<span class="token punctuation">;</span> @purseMap <span class="token operator">&lt;</span><span class="token operator">-</span> newPurseMapOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  debug<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"paying"</span><span class="token punctuation">,</span> artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"share"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" to "</span><span class="token punctuation">,</span> artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n                  <span class="token keyword">new</span> <span class="token class-name">paidAck</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n                    @<span class="token punctuation">[</span>myPurse<span class="token punctuation">,</span> <span class="token string">"deposit"</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">(</span>artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"share"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> paymentPurse<span class="token punctuation">,</span> <span class="token operator">*</span>paidAck<span class="token punctuation">)</span> <span class="token operator">|</span>\n                    <span class="token keyword">for</span> <span class="token punctuation">(</span>_ <span class="token operator">&lt;</span><span class="token operator">-</span> paidAck<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                      purseMapOut<span class="token operator">!</span><span class="token punctuation">(</span>purseMap<span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                  <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    contract <span class="token function">showBalances</span><span class="token punctuation">(</span>@writers<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token comment">// debug!(["showBalances: ", writers]) |</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span>@pubKeyToPurse <span class="token operator">&lt;</span><span class="token operator">-</span> pubKeyToPurseStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// debug!(["showBalances keyToPurse: ", pubKeyToPurse]) |</span>\n        pubKeyToPurseStore<span class="token operator">!</span><span class="token punctuation">(</span>pubKeyToPurse<span class="token punctuation">)</span> <span class="token operator">|</span>\n        <span class="token keyword">new</span> <span class="token class-name">showAll</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n          showAll<span class="token operator">!</span><span class="token punctuation">(</span>writers<span class="token punctuation">)</span> <span class="token operator">|</span>\n\n          contract <span class="token function">showAll</span><span class="token punctuation">(</span>@writers<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n            match writers <span class="token punctuation">{</span>\n              <span class="token punctuation">[</span>artist<span class="token punctuation">,</span> <span class="token spread operator">...</span>rest<span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">new</span> <span class="token class-name">balanceOut</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n                  @<span class="token punctuation">[</span>pubKeyToPurse<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"pubKey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"getBalance"</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>balanceOut<span class="token punctuation">)</span> <span class="token operator">|</span>\n                  <span class="token keyword">for</span> <span class="token punctuation">(</span>@balance <span class="token operator">&lt;</span><span class="token operator">-</span> balanceOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    debug<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span>artist<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" has "</span><span class="token punctuation">,</span> balance<span class="token punctuation">]</span><span class="token punctuation">)</span>\n                  <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span> <span class="token operator">|</span>\n                showAll<span class="token operator">!</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span>\n              <span class="token punctuation">}</span>\n              <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token arrow operator">=></span> done<span class="token operator">!</span><span class="token punctuation">(</span><span class="token maybe-class-name">Nil</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n',id:"74b1e3802dab854170e242193f2c4037",filepath:"rcat.rho"}},{node:{title:"Non negative numbers contract",content:'<pre class="language-js"><code class="language-js">contract @<span class="token string">"NonNegativeNumber"</span><span class="token punctuation">(</span>@init<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">this</span><span class="token punctuation">,</span> valueStore <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    contract @<span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@x<span class="token punctuation">,</span> success<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@v <span class="token operator">&lt;</span><span class="token operator">-</span> valueStore<span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">+</span> x <span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            valueStore<span class="token operator">!</span><span class="token punctuation">(</span>v <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">|</span> success<span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">//overflow</span>\n            valueStore<span class="token operator">!</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">|</span> success<span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        success<span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    contract @<span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"sub"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@x<span class="token punctuation">,</span> success<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@v <span class="token operator">&lt;</span><span class="token operator">-</span> valueStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            valueStore<span class="token operator">!</span><span class="token punctuation">(</span>v <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">|</span> success<span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            valueStore<span class="token operator">!</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">|</span> success<span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        success<span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    contract @<span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span><span class="token punctuation">(</span>@v <span class="token operator">&lt;</span><span class="token operator">-</span> valueStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        valueStore<span class="token operator">!</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n    match init <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n      <span class="token parameter"><span class="token boolean">true</span></span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> valueStore<span class="token operator">!</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n      <span class="token parameter">_</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> valueStore<span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">//Initial balance is zero if given is negative</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n',id:"9345465d183d894002565b50cbae3f26",filepath:"non-negative-numbers.rho"}},{node:{title:"Operator for lists",content:'<pre class="language-js"><code class="language-js">contract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"prepend"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@head<span class="token punctuation">,</span> @tail<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">++</span> tail<span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"append"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@list<span class="token punctuation">,</span> @element<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>list <span class="token operator">++</span> <span class="token punctuation">[</span>element<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\n\n<span class="token comment">//A fold over the list which breaks early if a condition is met.</span>\n<span class="token comment">//Both the condition and combinator are are combined into a single</span>\n<span class="token comment">//function which returns a [boolean, value] pair.</span>\n<span class="token comment">//Use cases: see get and indexOf</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"partialFold"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@list<span class="token punctuation">,</span> @start<span class="token punctuation">,</span> combinatorAndCondition<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">loop</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    contract <span class="token function">loop</span><span class="token punctuation">(</span>@accumulatedValue<span class="token punctuation">,</span> @lst<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      match lst <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span>head <span class="token spread operator">...</span>tail<span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">new</span> <span class="token class-name">result</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n            combinatorAndCondition<span class="token operator">!</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> accumulatedValue<span class="token punctuation">,</span> <span class="token operator">*</span>result<span class="token punctuation">)</span> <span class="token operator">|</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>@done<span class="token punctuation">,</span> @newValue <span class="token operator">&lt;</span><span class="token operator">-</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n              <span class="token keyword">else</span>     <span class="token punctuation">{</span> loop<span class="token operator">!</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> tail<span class="token punctuation">)</span>   <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token parameter">_</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> accumulatedValue<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span> loop<span class="token operator">!</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> list<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"fold"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@list<span class="token punctuation">,</span> @start<span class="token punctuation">,</span> combinator<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">combinatorAndCondition</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    contract <span class="token function">combinatorAndCondition</span><span class="token punctuation">(</span>@head<span class="token punctuation">,</span> @accumulatedValue<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">new</span> <span class="token class-name">result</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n        combinator<span class="token operator">!</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> accumulatedValue<span class="token punctuation">,</span> <span class="token operator">*</span>result<span class="token punctuation">)</span> <span class="token operator">|</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@r <span class="token operator">&lt;</span><span class="token operator">-</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    <span class="token keyword">new</span> <span class="token class-name">result</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n      @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"partialFold"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token operator">*</span>combinatorAndCondition<span class="token punctuation">,</span> <span class="token operator">*</span>result<span class="token punctuation">)</span> <span class="token operator">|</span>\n      <span class="token keyword">for</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> @value <span class="token operator">&lt;</span><span class="token operator">-</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"reverse"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@list<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"fold"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"prepend"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">return</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@list<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">combinator</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    contract <span class="token function">combinator</span><span class="token punctuation">(</span>@head<span class="token punctuation">,</span> @accumulatedValue<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">new</span> <span class="token class-name">mappedHead</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n        <span class="token keyword">function</span><span class="token operator">!</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>mappedHead<span class="token punctuation">)</span> <span class="token operator">|</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@x <span class="token operator">&lt;</span><span class="token operator">-</span> mappedHead<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"append"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>accumulatedValue<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">return</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"fold"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>combinator<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">return</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"parMap"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@list<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">namesListCh</span><span class="token punctuation">,</span> startProcess<span class="token punctuation">,</span> getOutput <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    contract <span class="token function">startProcess</span><span class="token punctuation">(</span>@x<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">outCh</span> <span class="token keyword">in</span> <span class="token punctuation">{</span> <span class="token keyword">function</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>outCh<span class="token punctuation">)</span> <span class="token operator">|</span> ret<span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>outCh<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">|</span>\n    contract <span class="token function">getOutput</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">for</span><span class="token punctuation">(</span>@result <span class="token operator">&lt;</span><span class="token operator">-</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span> ret<span class="token operator">!</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n    <span class="token comment">//map each element to a name listening for the result of the function</span>\n    @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"map"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token operator">*</span>startProcess<span class="token punctuation">,</span> <span class="token operator">*</span>namesListCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span>@namesList <span class="token operator">&lt;</span><span class="token operator">-</span> namesListCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//map each name to its result</span>\n      @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"map"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>namesList<span class="token punctuation">,</span> <span class="token operator">*</span>getOutput<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">return</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"unorderedParMap"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@list<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">mapLoop</span><span class="token punctuation">,</span> collect<span class="token punctuation">,</span> startCount<span class="token punctuation">,</span> completeCount<span class="token punctuation">,</span> accCh <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    <span class="token comment">//Spawn processes, each computing one element</span>\n    <span class="token comment">//also processes listening for the result</span>\n    contract <span class="token function">mapLoop</span><span class="token punctuation">(</span>@l<span class="token punctuation">,</span> @count<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token punctuation">{</span>\n      match l <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span>hd <span class="token spread operator">...</span>tl<span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">new</span> <span class="token class-name">ch</span> <span class="token keyword">in</span> <span class="token punctuation">{</span> <span class="token keyword">function</span><span class="token operator">!</span><span class="token punctuation">(</span>hd<span class="token punctuation">,</span> <span class="token operator">*</span>ch<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">for</span><span class="token punctuation">(</span>@r <span class="token operator">&lt;</span><span class="token operator">-</span> ch<span class="token punctuation">)</span><span class="token punctuation">{</span>collect<span class="token operator">!</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">|</span> mapLoop<span class="token operator">!</span><span class="token punctuation">(</span>tl<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token parameter">_</span>  <span class="token arrow operator">=></span> <span class="token punctuation">{</span> startCount<span class="token operator">!</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    <span class="token comment">//add a result to our accumulating list</span>\n    contract <span class="token function">collect</span><span class="token punctuation">(</span>@result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span><span class="token punctuation">(</span>@sc <span class="token operator">&lt;</span><span class="token operator">-</span> startCount<span class="token punctuation">;</span> @cc <span class="token operator">&lt;</span><span class="token operator">-</span> completeCount<span class="token punctuation">;</span> @acc <span class="token operator">&lt;</span><span class="token operator">-</span> accCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        startCount<span class="token operator">!</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span> <span class="token operator">|</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">==</span> cc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//all started processes completed!</span>\n          @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"prepend"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> acc<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">return</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//still waiting on some</span>\n          completeCount<span class="token operator">!</span><span class="token punctuation">(</span>cc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n          @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"prepend"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> acc<span class="token punctuation">,</span> <span class="token operator">*</span>accCh<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    match list <span class="token punctuation">{</span>\n      <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n      <span class="token parameter">_</span>  <span class="token arrow operator">=></span> <span class="token punctuation">{</span> mapLoop<span class="token operator">!</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> completeCount<span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> accCh<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"foreach"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@list<span class="token punctuation">,</span> proc<span class="token punctuation">,</span> isDone<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">combinator</span><span class="token punctuation">,</span> nilReturn <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    contract <span class="token function">combinator</span><span class="token punctuation">(</span>@head<span class="token punctuation">,</span> @accumulatedValue<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token comment">//Need return flag from `proc` in order to guarantee execution order</span>\n      <span class="token keyword">new</span> <span class="token class-name">isDone</span> <span class="token keyword">in</span> <span class="token punctuation">{</span> proc<span class="token operator">!</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>isDone<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">for</span><span class="token punctuation">(</span>_ <span class="token operator">&lt;</span><span class="token operator">-</span> isDone<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token maybe-class-name">Nil</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"fold"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token maybe-class-name">Nil</span><span class="token punctuation">,</span> <span class="token operator">*</span>combinator<span class="token punctuation">,</span> <span class="token operator">*</span>nilReturn<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">for</span><span class="token punctuation">(</span>_ <span class="token operator">&lt;</span><span class="token operator">-</span> nilReturn<span class="token punctuation">)</span><span class="token punctuation">{</span> isDone<span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"indexOf"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@list<span class="token punctuation">,</span> @value<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">combinatorAndCondition</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    contract <span class="token function">combinatorAndCondition</span><span class="token punctuation">(</span>@head<span class="token punctuation">,</span> @accumulatedValue<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>head <span class="token operator">==</span> value<span class="token punctuation">,</span> accumulatedValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    <span class="token keyword">new</span> <span class="token class-name">result</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n      @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"partialFold"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span>combinatorAndCondition<span class="token punctuation">,</span> <span class="token operator">*</span>result<span class="token punctuation">)</span> <span class="token operator">|</span>\n      <span class="token keyword">for</span><span class="token punctuation">(</span>@valueFound<span class="token punctuation">,</span> @i <span class="token operator">&lt;</span><span class="token operator">-</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>valueFound<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span>\n        <span class="token keyword">else</span>            <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"zip"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@list1<span class="token punctuation">,</span> @list2<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">loop</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    contract <span class="token function">loop</span><span class="token punctuation">(</span>@pair<span class="token punctuation">,</span> @acc<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      match pair <span class="token punctuation">{</span>\n        <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>h1 <span class="token spread operator">...</span>t1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>h2 <span class="token spread operator">...</span>t2<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          loop<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">,</span> acc <span class="token operator">++</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span> h2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">return</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token parameter">_</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    loop<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">return</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token operator">|</span>\ncontract @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"range"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@start<span class="token punctuation">,</span> @end<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">loop</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    contract <span class="token function">loop</span><span class="token punctuation">(</span>@i<span class="token punctuation">,</span> @list<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        loop<span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">++</span> list<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span> loop<span class="token operator">!</span><span class="token punctuation">(</span>end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n',id:"604f8dc9c285a7c1749b4a678d6a443e",filepath:"list.rho"}},{node:{title:"Make POS",content:'<pre class="language-js"><code class="language-js">contract @<span class="token string">"MakePoS"</span><span class="token punctuation">(</span>@purse<span class="token punctuation">,</span> @minimumBond<span class="token punctuation">,</span> @maximumBond<span class="token punctuation">,</span> @initBonds<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">this</span><span class="token punctuation">,</span> bondsCh<span class="token punctuation">,</span> joiningFeeCh<span class="token punctuation">,</span> clonePurse<span class="token punctuation">,</span> depositPurse<span class="token punctuation">,</span> updateBonds<span class="token punctuation">,</span> feeDistribution <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    bondsCh<span class="token operator">!</span><span class="token punctuation">(</span>initBonds<span class="token punctuation">)</span> <span class="token operator">|</span>\n    joiningFeeCh<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>minimumBond<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token comment">//joining fee equal to minimum bond amount</span>\n\n    <span class="token comment">//The purpose of this contract is to move the contents</span>\n    <span class="token comment">//of an existing purse into a new purse. This prevents</span>\n    <span class="token comment">//the owner of the given purse from modifying the balance</span>\n    <span class="token comment">//during processing.</span>\n    contract <span class="token function">clonePurse</span><span class="token punctuation">(</span>@givenPurse<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">new</span> <span class="token class-name">balanceCh</span><span class="token punctuation">,</span> resultCh <span class="token keyword">in</span> <span class="token punctuation">{</span>\n        @<span class="token punctuation">(</span>givenPurse<span class="token punctuation">,</span> <span class="token string">"getBalance"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>balanceCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@balance <span class="token operator">&lt;</span><span class="token operator">-</span> balanceCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          @<span class="token punctuation">(</span>givenPurse<span class="token punctuation">,</span> <span class="token string">"split"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>balance<span class="token punctuation">,</span> <span class="token operator">*</span>resultCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n          <span class="token keyword">for</span><span class="token punctuation">(</span>@result <span class="token operator">&lt;</span><span class="token operator">-</span> resultCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            match result <span class="token punctuation">{</span>\n              <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Left"</span><span class="token punctuation">,</span> <span class="token string">"Could not extract funds from given purse"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n              <span class="token punctuation">[</span>newPurse<span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Right"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newPurse<span class="token punctuation">,</span> balance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n    contract @<span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"validateBondAmount"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@bondPurse<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">new</span> <span class="token class-name">balanceCh</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n        @<span class="token punctuation">(</span>bondPurse<span class="token punctuation">,</span> <span class="token string">"getBalance"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>balanceCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@balance <span class="token operator">&lt;</span><span class="token operator">-</span> balanceCh<span class="token punctuation">;</span> @joiningFee <span class="token operator">&lt;</span><span class="token operator">-</span> joiningFeeCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span>      <span class="token punctuation">(</span>balance <span class="token operator">-</span> joiningFee <span class="token operator">&lt;</span> minimumBond<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Left"</span><span class="token punctuation">,</span> <span class="token string">"Bond less than minimum!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">-</span> joiningFee <span class="token operator">></span> maximumBond<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Left"</span><span class="token punctuation">,</span> <span class="token string">"Bond greater than maximum!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n          <span class="token keyword">else</span>                                         <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Right"</span><span class="token punctuation">,</span> bondPurse<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n    contract @<span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"validateBondingRate"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@bondPurse<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token comment">//TODO: figure out rate-limiting of bonding</span>\n      <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Right"</span><span class="token punctuation">,</span> bondPurse<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n    contract <span class="token function">depositPurse</span><span class="token punctuation">(</span>@bondPurse<span class="token punctuation">,</span> @amount<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">new</span> <span class="token class-name">successCh</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n        @<span class="token punctuation">(</span>purse<span class="token punctuation">,</span> <span class="token string">"deposit"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> bondPurse<span class="token punctuation">,</span> <span class="token operator">*</span>successCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@success <span class="token operator">&lt;</span><span class="token operator">-</span> successCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Right"</span><span class="token punctuation">,</span> bondPurse<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n          <span class="token keyword">else</span>         <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Left"</span><span class="token punctuation">,</span> <span class="token string">"Deposit failed."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n    contract @<span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"isBonded"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@publicKey<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span><span class="token punctuation">(</span>@bonds <span class="token operator">&lt;</span><span class="token operator">-</span> bondsCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        bondsCh<span class="token operator">!</span><span class="token punctuation">(</span>bonds<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>bonds<span class="token punctuation">.</span><span class="token method function property-access">contains</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n    contract @<span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"getBonds"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span><span class="token punctuation">(</span>@bonds <span class="token operator">&lt;</span><span class="token operator">-</span> bondsCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        bondsCh<span class="token operator">!</span><span class="token punctuation">(</span>bonds<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>bonds<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n    contract <span class="token function">feeDistribution</span><span class="token punctuation">(</span>@n<span class="token punctuation">,</span> @joiningFee<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">new</span> <span class="token class-name">rangeCh</span><span class="token punctuation">,</span> feeDistFunc<span class="token punctuation">,</span> feeDistCh<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> nCh<span class="token punctuation">,</span> totalCh <span class="token keyword">in</span> <span class="token punctuation">{</span>\n        contract <span class="token function">sum</span><span class="token punctuation">(</span>@x<span class="token punctuation">,</span> @y<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">|</span>\n        contract <span class="token function">feeDistFunc</span><span class="token punctuation">(</span>@k<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> joiningFee <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">|</span>\n        @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"range"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span>rangeCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@range <span class="token operator">&lt;</span><span class="token operator">-</span> rangeCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"map"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>range<span class="token punctuation">,</span> <span class="token operator">*</span>feeDistFunc<span class="token punctuation">,</span> <span class="token operator">*</span>feeDistCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n          <span class="token keyword">for</span><span class="token punctuation">(</span>@feeDist <span class="token operator">&lt;</span><span class="token operator">-</span> feeDistCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            @<span class="token punctuation">(</span><span class="token string">"ListOps"</span><span class="token punctuation">,</span> <span class="token string">"fold"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>feeDist<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>sum<span class="token punctuation">,</span> <span class="token operator">*</span>totalCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span>@total <span class="token operator">&lt;</span><span class="token operator">-</span> totalCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>\n                <span class="token comment">//give remainder (non-zero from rounding) to first validator</span>\n                <span class="token punctuation">[</span>feeDist<span class="token punctuation">.</span><span class="token method function property-access">nth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> joiningFee <span class="token operator">-</span> total<span class="token punctuation">]</span> <span class="token operator">++</span>\n                  feeDist<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n              <span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n    contract <span class="token function">updateBonds</span><span class="token punctuation">(</span>@publicKey<span class="token punctuation">,</span> @sigVerify<span class="token punctuation">,</span> @bondAmount<span class="token punctuation">,</span> @rewardsForwarder<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token keyword">new</span> <span class="token class-name">feeDistCh</span><span class="token punctuation">,</span> bondUpdateLoop<span class="token punctuation">,</span> bondsWithFeeCh <span class="token keyword">in</span> <span class="token punctuation">{</span>\n        <span class="token comment">//update the stakes of existing validators with their share of the joining fee</span>\n        contract <span class="token function">bondUpdateLoop</span><span class="token punctuation">(</span>@bondsMap<span class="token punctuation">,</span> @feeDist<span class="token punctuation">,</span> @updatedMap<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n          match bondsMap <span class="token punctuation">{</span>\n            <span class="token punctuation">{</span>key<span class="token operator">:</span><span class="token punctuation">(</span>stake<span class="token punctuation">,</span> sigVerify<span class="token punctuation">,</span> rewardsForwarder<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token spread operator">...</span>rest<span class="token punctuation">}</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n              bondUpdateLoop<span class="token operator">!</span><span class="token punctuation">(</span>\n                rest<span class="token punctuation">,</span>\n                feeDist<span class="token punctuation">,</span>\n                updatedMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>stake <span class="token operator">+</span> feeDist<span class="token punctuation">.</span><span class="token method function property-access">nth</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sigVerify<span class="token punctuation">,</span> rewardsForwarder<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token operator">*</span><span class="token keyword">return</span>\n              <span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token parameter">_</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>updatedMap<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token operator">|</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@bonds <span class="token operator">&lt;</span><span class="token operator">-</span> bondsCh<span class="token punctuation">;</span> @joiningFee <span class="token operator">&lt;</span><span class="token operator">-</span> joiningFeeCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          feeDistribution<span class="token operator">!</span><span class="token punctuation">(</span>bonds<span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> joiningFee<span class="token punctuation">,</span> <span class="token operator">*</span>feeDistCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n          <span class="token keyword">for</span><span class="token punctuation">(</span>@feeDist <span class="token operator">&lt;</span><span class="token operator">-</span> feeDistCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            bondUpdateLoop<span class="token operator">!</span><span class="token punctuation">(</span>bonds<span class="token punctuation">,</span> feeDist<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>bondsWithFeeCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span>@bondsWithFee <span class="token operator">&lt;</span><span class="token operator">-</span> bondsWithFeeCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              bondsCh<span class="token operator">!</span><span class="token punctuation">(</span>bondsWithFee<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">,</span> <span class="token punctuation">(</span>bondAmount <span class="token operator">-</span> joiningFee<span class="token punctuation">,</span> sigVerify<span class="token punctuation">,</span> rewardsForwarder<span class="token punctuation">,</span> bonds<span class="token punctuation">.</span><span class="token method function property-access">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n              <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"Bond successful!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n    contract @<span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"bond"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@publicKey<span class="token punctuation">,</span> @sigVerify<span class="token punctuation">,</span> @givenBondPurse<span class="token punctuation">,</span> @rewardsForwarder<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token comment">//TODO: Validate that givenBondPurse comes from the same mint as purse</span>\n\n      <span class="token keyword">new</span> <span class="token class-name">resultCh</span><span class="token punctuation">,</span> bondPurseCh<span class="token punctuation">,</span> validatePublicKey<span class="token punctuation">,</span> depositClonePurse <span class="token keyword">in</span> <span class="token punctuation">{</span>\n        <span class="token comment">//lambda-expression-like construction to insert key validation into the composition</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@x<span class="token punctuation">,</span> ret <span class="token operator">&lt;</span><span class="token operator">-</span> validatePublicKey<span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">new</span> <span class="token class-name">isBondedCh</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n            @<span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"isBonded"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">,</span> <span class="token operator">*</span>isBondedCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span>@isBonded <span class="token operator">&lt;</span><span class="token operator">-</span> isBondedCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>isBonded<span class="token punctuation">)</span> <span class="token punctuation">{</span> ret<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Left"</span><span class="token punctuation">,</span> <span class="token string">"Public key ${pk} already bonded."</span> <span class="token operator">%</span><span class="token operator">%</span> <span class="token punctuation">{</span><span class="token string">"pk"</span> <span class="token operator">:</span> publicKey<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n              <span class="token keyword">else</span>          <span class="token punctuation">{</span> ret<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Right"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token operator">|</span>\n        clonePurse<span class="token operator">!</span><span class="token punctuation">(</span>givenBondPurse<span class="token punctuation">,</span> <span class="token operator">*</span>bondPurseCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span>@cloneResult <span class="token operator">&lt;</span><span class="token operator">-</span> bondPurseCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          match cloneResult <span class="token punctuation">{</span>\n            <span class="token punctuation">(</span><span class="token string">"Right"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>bondPurse<span class="token punctuation">,</span> bondAmount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">for</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> ret <span class="token operator">&lt;</span><span class="token operator">-</span> depositClonePurse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                depositPurse<span class="token operator">!</span><span class="token punctuation">(</span>bondPurse<span class="token punctuation">,</span> bondAmount<span class="token punctuation">,</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span>\n              <span class="token punctuation">}</span> <span class="token operator">|</span>\n              @<span class="token punctuation">(</span><span class="token string">"Either"</span><span class="token punctuation">,</span> <span class="token string">"compose"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>bondPurse<span class="token punctuation">,</span> <span class="token punctuation">[</span>\n                                    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"validateBondAmount"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"validateBondingRate"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                                    <span class="token operator">*</span>validatePublicKey<span class="token punctuation">,</span>\n                                    <span class="token operator">*</span>depositClonePurse\n                                    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>resultCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n              <span class="token keyword">for</span><span class="token punctuation">(</span>@result <span class="token operator">&lt;</span><span class="token operator">-</span> resultCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                match result <span class="token punctuation">{</span>\n                  <span class="token punctuation">(</span><span class="token string">"Right"</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> updateBonds<span class="token operator">!</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">,</span> sigVerify<span class="token punctuation">,</span> bondAmount<span class="token punctuation">,</span> rewardsForwarder<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n\n                  <span class="token punctuation">(</span><span class="token string">"Left"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n                    <span class="token comment">//return funds to original purse since an error occurred</span>\n                    @<span class="token punctuation">(</span>givenBondPurse<span class="token punctuation">,</span> <span class="token string">"deposit"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>bondAmount<span class="token punctuation">,</span> bondPurse<span class="token punctuation">,</span> <span class="token operator">*</span>resultCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n                    <span class="token keyword">for</span><span class="token punctuation">(</span>_ <span class="token operator">&lt;</span><span class="token operator">-</span> resultCh<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n                  <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token punctuation">(</span><span class="token string">"Left"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n\n    <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n',id:"b18d8990804c45650bcfe53220733242",filepath:"make-pos.rho"}},{node:{title:"Prime calculation",content:'<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">loop</span><span class="token punctuation">,</span> primeCheck<span class="token punctuation">,</span> <span class="token function">stdoutAck</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rho:io:stdoutAck</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n  contract <span class="token function">loop</span><span class="token punctuation">(</span>@x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    match x <span class="token punctuation">{</span>\n      <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token maybe-class-name">Nil</span>\n      <span class="token punctuation">[</span>head <span class="token spread operator">...</span>tail<span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">new</span> <span class="token class-name">ret</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n          <span class="token keyword">for</span> <span class="token punctuation">(</span>_ <span class="token operator">&lt;</span><span class="token operator">-</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            loop<span class="token operator">!</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token operator">|</span> primeCheck<span class="token operator">!</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token operator">|</span>\n  contract <span class="token function">primeCheck</span><span class="token punctuation">(</span>@x<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    match x <span class="token punctuation">{</span>\n      <span class="token parameter"><span class="token maybe-class-name">Nil</span></span> <span class="token arrow operator">=></span> stdoutAck<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"Nil"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span>\n      <span class="token operator">~</span><span class="token punctuation">{</span><span class="token operator">~</span><span class="token maybe-class-name">Nil</span> <span class="token operator">|</span> <span class="token operator">~</span><span class="token maybe-class-name">Nil</span><span class="token punctuation">}</span> <span class="token arrow operator">=></span> stdoutAck<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"Prime"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span>\n      <span class="token parameter">_</span> <span class="token arrow operator">=></span> stdoutAck<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"Composite"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token operator">|</span>\n  loop<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token maybe-class-name">Nil</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token operator">|</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token operator">|</span> <span class="token maybe-class-name">Nil</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token operator">|</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token maybe-class-name">Nil</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n',id:"4e41e0bf6001f6a93834d90048413149",filepath:"prime.rho"}},{node:{title:"ERC 20 Wallet",content:'<pre class="language-js"><code class="language-js">contract @<span class="token string">"BasicWallet"</span><span class="token punctuation">(</span>@purse<span class="token punctuation">,</span> @algorithm<span class="token punctuation">,</span> @pk<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">new</span> <span class="token class-name">cryptoVerifyCh</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n    match algorithm <span class="token punctuation">{</span>\n      <span class="token string">"ed25519"</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        cryptoVerifyCh<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ed25519Verify"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token string">"secp256k1"</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        cryptoVerifyCh<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"secp256k1Verify"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token parameter">_</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        cryptoVerifyCh<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span>@maybeCryptoVerify <span class="token operator">&lt;</span><span class="token operator">-</span> cryptoVerifyCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      match maybeCryptoVerify <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token arrow operator">=></span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">[</span>cryptoVerify<span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">new</span> <span class="token class-name">basicWallet</span><span class="token punctuation">,</span> verify<span class="token punctuation">,</span> nonceCh <span class="token keyword">in</span> <span class="token punctuation">{</span>\n            nonceCh<span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span>\n            contract <span class="token function">verify</span><span class="token punctuation">(</span>@nonce<span class="token punctuation">,</span> @amount<span class="token punctuation">,</span> @retCh<span class="token punctuation">,</span> @sig<span class="token punctuation">,</span> <span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n              <span class="token keyword">for</span><span class="token punctuation">(</span>@prevNonce <span class="token operator">&lt;</span><span class="token operator">-</span> nonceCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>nonce <span class="token operator">==</span> <span class="token punctuation">(</span>prevNonce <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  <span class="token keyword">new</span> <span class="token class-name">result</span><span class="token punctuation">,</span> hashOut <span class="token keyword">in</span> <span class="token punctuation">{</span>\n                    @<span class="token string">"blake2b256Hash"</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nonce<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> retCh<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>hashOut<span class="token punctuation">)</span> <span class="token operator">|</span>\n                    <span class="token keyword">for</span><span class="token punctuation">(</span>@hash <span class="token operator">&lt;</span><span class="token operator">-</span> hashOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                      @cryptoVerify<span class="token operator">!</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> sig<span class="token punctuation">.</span><span class="token method function property-access">hexToBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pk<span class="token punctuation">.</span><span class="token method function property-access">hexToBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>result<span class="token punctuation">)</span> <span class="token operator">|</span>\n                      <span class="token keyword">for</span><span class="token punctuation">(</span>@r <span class="token operator">&lt;</span><span class="token operator">-</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span> nonceCh<span class="token operator">!</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n                        <span class="token keyword">else</span> <span class="token punctuation">{</span> nonceCh<span class="token operator">!</span><span class="token punctuation">(</span>prevNonce<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n                      <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                  <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                  nonceCh<span class="token operator">!</span><span class="token punctuation">(</span>prevNonce<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token operator">|</span>\n            contract @<span class="token punctuation">(</span><span class="token operator">*</span>basicWallet<span class="token punctuation">,</span> <span class="token string">"getNonce"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n              <span class="token keyword">for</span><span class="token punctuation">(</span>@nonce <span class="token operator">&lt;</span><span class="token operator">-</span> nonceCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                nonceCh<span class="token operator">!</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token operator">|</span>\n            contract @<span class="token punctuation">(</span><span class="token operator">*</span>basicWallet<span class="token punctuation">,</span> <span class="token string">"getBalance"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n              @<span class="token punctuation">(</span>purse<span class="token punctuation">,</span> <span class="token string">"getBalance"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">return</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token operator">|</span>\n            contract @<span class="token punctuation">(</span><span class="token operator">*</span>basicWallet<span class="token punctuation">,</span> <span class="token string">"deposit"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@amount<span class="token punctuation">,</span> @src<span class="token punctuation">,</span> success<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n              @<span class="token punctuation">(</span>purse<span class="token punctuation">,</span> <span class="token string">"deposit"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token operator">*</span>success<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token operator">|</span>\n            contract @<span class="token punctuation">(</span><span class="token operator">*</span>basicWallet<span class="token punctuation">,</span> <span class="token string">"transfer"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>@amount<span class="token punctuation">,</span> @nonce<span class="token punctuation">,</span> @sig<span class="token punctuation">,</span> destination<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n              <span class="token keyword">new</span> <span class="token class-name">verifyResult</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n                verify<span class="token operator">!</span><span class="token punctuation">(</span>nonce<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> <span class="token operator">*</span>destination<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> <span class="token operator">*</span>verifyResult<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">for</span><span class="token punctuation">(</span>@verified <span class="token operator">&lt;</span><span class="token operator">-</span> verifyResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  <span class="token keyword">if</span> <span class="token punctuation">(</span>verified<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">new</span> <span class="token class-name">splitResultCh</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>\n                      @<span class="token punctuation">(</span>purse<span class="token punctuation">,</span> <span class="token string">"split"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> <span class="token operator">*</span>splitResultCh<span class="token punctuation">)</span> <span class="token operator">|</span>\n                      <span class="token keyword">for</span><span class="token punctuation">(</span>@splitResult  <span class="token operator">&lt;</span><span class="token operator">-</span> splitResultCh<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        match splitResult <span class="token punctuation">{</span>\n                          <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token arrow operator">=></span> <span class="token punctuation">{</span> status<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"Overdraft"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n                          <span class="token punctuation">[</span>payment<span class="token punctuation">]</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span> destination<span class="token operator">!</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span> <span class="token operator">|</span> status<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"Success"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span>\n                      <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> status<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"Invalid signature or nonce"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token operator">|</span>\n            <span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">*</span>basicWallet<span class="token punctuation">]</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n',id:"5348defa65dd676830b8d08573907448",filepath:"erc20.rho"}}]}},I=function(n){var s=n.options;s.__staticData?s.__staticData.data=R:(s.__staticData=e.a.observable({data:R}),s.computed=Q({$static:function(){return s.__staticData.data}},s.computed))},O=Object(o.a)(S,(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("div",{staticClass:"examples flex flex-align-top"},[a("div",{staticClass:"examples__sidebar"},[n._m(0),n._l(n.$static.examples.edges,(function(s,t){var p=s.node;return a("a",{class:{active:t==n.current},attrs:{href:"#"},on:{click:function(s){s.preventDefault(),n.current=t}}},[n._v("\n\t\t\t"+n._s(p.title)+"\n\t\t")])}))],2),a("div",{staticClass:"examples__frame"},[n._l(n.$static.examples.edges,(function(s,t){var p=s.node;return t==n.current?a("div",{key:t,staticClass:"examples__header flex hide-for-small"},[a("div",{staticClass:"examples__header-title"},[a("div",[n._v(" "+n._s(p.filepath)+" ")])])]):n._e()})),a("transition",{attrs:{name:"slide"}},n._l(n.$static.examples.edges,(function(s,t){var p=s.node;return t==n.current?a("div",{key:t,staticClass:"examples__code"},[a("div",{directives:[{name:"g-image",rawName:"v-g-image"}],domProps:{innerHTML:n._s(p.content)}})]):n._e()})),0)],2)])}),[function(){var n=this.$createElement,s=this._self._c||n;return s("div",{staticClass:"examples__buttons"},[s("div"),s("div"),s("div")])}],!1,null,null,null);"function"==typeof I&&I(O);var P={components:{Examples:O.exports}},j=(a("K2Oh"),Object(o.a)(P,(function(){var n=this.$createElement,s=this._self._c||n;return s("Section",{attrs:{dots:"true"}},[s("h2",{staticClass:"container text-center"},[this._v("\n    A better way to build apps for distributed computing\n  ")]),s("p",{staticClass:"lead text-center container-md"},[this._v("\n    Rholang makes it simple & fast to build modern dApps.\n  ")]),s("div",{staticClass:"home-examples mb-x2"},[s("Examples")],1),s("p",{staticClass:"home-links text-center "},[s("g-link",{staticClass:"button primary button--large",attrs:{to:"/docs/"}},[this._v("\n      Get started\n    ")])],1)])}),[],!1,null,null,null).exports),F=(a("ZqBe"),Object(o.a)({},(function(){var n=this.$createElement,s=this._self._c||n;return s("Section",[s("h2",{staticClass:"text-center mb-x2"},[this._v("Rholang Sponsors")]),s("div",{staticClass:"grid-cols container container-md grid-cols--2"},[s("Card",{staticClass:"sponsor text-center"},[s("g-image",{attrs:{src:a("KgLI"),alt:"Netlify"}}),s("p",[this._v("Thanks to "),s("a",{attrs:{href:"https://netlify.com",rel:"noopener",target:"_blank"}},[this._v("Netlify")]),this._v(" for sponsoring Gridsome hosting infrastructure.")])],1),s("Card",{staticClass:"sponsor text-center"},[s("g-image",{attrs:{src:a("Wavt"),alt:"Algolia"}}),s("p",[this._v("Thanks to "),s("a",{attrs:{href:"https://algolia.com",rel:"noopener",target:"_blank"}},[this._v("Algolia")]),this._v(" for sponsoring search for Plugins and Documentation")])],1)],1)])}),[],!1,null,null,null).exports),Y={components:{Connect:a("84uh").a}},T=(a("jX2m"),Object(o.a)(Y,(function(){var n=this.$createElement,s=this._self._c||n;return s("Section",{staticClass:"home-connect"},[s("div",{staticClass:"grid-cols flex grid-cols--2 grid-cols--gap-large"},[s("div",{staticClass:"text-center"},[s("h2",[this._v("Connect the modern web")]),s("p",{staticClass:"lead"},[this._v("\n        The modern web is decoupled and modular. Gridsome makes it painlessly easy to build "),s("g-link",{attrs:{to:"/docs/jamstack/"}},[this._v("JAMstack")]),this._v(" websites using data from multiple sources such as Content API's, Headless CMSs, and other web services.\n      ")],1),s("p",[s("g-link",{attrs:{to:"/plugins/"}},[this._v("Browse Gridsome Plugins")])],1)]),s("div",[s("Connect")],1)])])}),[],!1,null,null,null).exports),H={data:function(){return{labels:["Testnet-1","Testnet-2","Testnet-3","Hardening-Phase","Mainnet","Venus update"],current:5,round:!0}},computed:{max:function(){return this.labels.length+1}}},L=Object(o.a)(H,(function(){var n=this.$createElement,s=this._self._c||n;return s("div",{staticClass:"container text-center "},[s("va-progress-tracker",{attrs:{labels:this.labels,round:this.round,current:this.current}})],1)}),[],!1,null,null,null).exports,G={components:{LazyHydrate:t.a,HomeIntroSimple:r,HomeHowItWorkSimple:h,HomeExamples:j,HomeCommunity:F,HomeConnect:T,HomeFeatures:E,HomeBlog:M,HomeIntroStepper:L},metaInfo:{title:"Documentation page for Rchain 🌟"}},U=(a("gEGz"),Object(o.a)(G,(function(){var n=this.$createElement,s=this._self._c||n;return s("Layout",{staticClass:"layout-homepage"},[s("LazyHydrate",{attrs:{"when-idle":""}},[s("home-intro-simple")],1),s("LazyHydrate",{attrs:{"when-visible":""}},[s("home-how-it-work-simple")],1),s("LazyHydrate",{attrs:{"when-visible":""}},[s("home-features")],1),s("LazyHydrate",{attrs:{"when-visible":""}},[s("home-examples")],1),s("LazyHydrate",{attrs:{"when-visible":""}},[s("home-blog")],1)],1)}),[],!1,null,null,null));s.default=U.exports},jX2m:function(n,s,a){"use strict";var t=a("Io39");a.n(t).a},lxMo:function(n,s,a){},n0V4:function(n,s,a){"use strict";var t=a("5smj");a.n(t).a},n6yM:function(n,s,a){"use strict";var t={props:{post:{type:Object,required:!0}}},p=(a("3GZc"),a("KHd+")),o=Object(p.a)(t,(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("p",[a("small",[n.post.author?[n._v("\n      Posted "+n._s(n.post.date)+"\n      "),n._l(n.post.author,(function(s,t){return[t&&t===n.post.author.length-1?a("span",[n._v("and")]):t>0?a("span",[n._v(",")]):n._e(),s.avatar?a("g-image",{staticClass:"author-image",attrs:{alt:s.title,src:s.avatar}}):n._e(),a("g-link",{key:s.id,attrs:{to:s.path}},[n._v(n._s(s.title))])]})),n.post.timeToRead?a("span",[n._v("~")]):n._e()]:n._e(),n.post.timeToRead?[a("strong",[n._v(n._s(n.post.timeToRead)+" min read")])]:n._e()],2)])}),[],!1,null,null,null);s.a=o.exports},qWrf:function(n,s,a){},rOvS:function(n,s){n.exports={type:"image",mimeType:"image/png",src:"/assets/static/connect-logos-3.d810e90.26669f176b9860c344dbc94845889000.png",size:{width:958,height:833},sizes:"(max-width: 958px) 100vw, 958px",srcset:["/assets/static/connect-logos-3.adb59be.26669f176b9860c344dbc94845889000.png 480w","/assets/static/connect-logos-3.d810e90.26669f176b9860c344dbc94845889000.png 958w"],dataUri:"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 958 833' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-d746b5b10672bcd1122d6dc7cc22fe59'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-d746b5b10672bcd1122d6dc7cc22fe59)' width='958' height='833' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA4CAYAAABNGP5yAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHKklEQVRo3u2Ze2xTVRzH77m3rGODPYBkPAyDja0ta1ftNrLhcATDHt0KjJa9nDrk/TDIcyAbIAT0Hw1qAjoVUeTNH8RHIiqOlwHiohjCS1gAGYmBtVNeMgY9fs/tuV07OwJGYm/ZL/nk97u/c253f7/7O%2bd32glCl/w30pS%2bw6t97ccm%2bA4JIMw%2bN2yzUGwbJ9hsNu9cZneEidls9rseM2ZMp3PZWGFhYfAk4HKGN3ii%2bG5aviTRZTphnG2s8vCkA7KPBVNQUCAHFGCe9xrzvD4lkezeYKoCwvWAy%2bk79Y/yb/lWVHBUAA8eOh4JKL2Usd1%2b3fKFuV%2bJKRYVYMcD60A8iANPg1EgD4wF0ezevLw8DewiUAD6ABOfbwQjwWyQDrRBVwFN7QkwA8eFjG2ZSEBun9Kh/ZGAOXjY50EVeAPMAy/j4WdCr4HORPn3yM/PZwkoB9VgPpgLUsBksADzJnCfmSeABE0lKBsgSl%2bCPQJJyDufsTWC%2bcbbxsXwh9UgiATQnW9kPeGLgI5CAroVFRUp5S1xfxhb98XFxcwn8jEt6Oa7mQZdG/SVTTkrA879N6Xre0/Q7QG%2bLRAdgTSB39N3yT6lDfrs6H5tTWlpVqs1YNsL1A6DugIey4NQsIn4vtOrfW2J2/cV95Q0r3ZPsQgUuDkevyXogxfrXNx2EanOJTLNrmF7E9KpmHrJm7fQWJlG7iweI91eYJVaFxZJrbNz5A9pnZoZtMGzNyzVeQJkgfuN8WuWhAeqhEDStryEqKT0Ra77ghWoiFj5midBqRBFkkA4iASa2SlxGmjtlcrUoXfnjV7dNj2rtm3WiNV3F1l1chJmZAV7EnjwrmzYF6RP7lDoJpDN/WLHe14AlWAhmBSpkRzMt8WR/Rr9dCV1b3uL0t3v0msl%2blI2%2bfqU4ZIKKkALGqVdlEobblBpJ2VJaAZhvvMUWQKmghfBLK0kzoGe%2bJk951Vat5K2bEQCtr5DmwoSS%2bTTXkVmMCeAcK0Hf4GZYCo4BJYCne88RbrzJSAfMcMlkbWBkvpcY/rFabb150qy1jZW5LzXWJVnkr/j24eJKqgACRwR65x2lHwp7M3gGRAeqAL%2b8TmdDfy2ZJIazgAi7wgG2A3gKNjEEhDo7Xcqrw/XkxtrF4uX5peLl5dUiZemeX6BuViRrYYuQHx8vQMskfv0Un4rnT5SOFlgEk5bTcIZa6pwpjBV9jM7uM8BLsUmXvuDlvbKeJDDkNqPwR2OwuShj8Nd0iXqFYuj1qst9hoPiu2oafdxQk7SeFBpjqX%2bfgdPhGM5WOZNVEgLghbxljUWe23Asw38sSG4BGoU3RuUIQEOvO25sF8Ck3Bdiesp0IxFgqvcIN/AtJ9dpldnAuzeBPSCPRqYwTBc5wMTbBN0MpLANA8YwbaUG0RoguCJx2dgPvUmwF4TBZ4FA0FEpze47MlCc%2b5gf59D5/3G5yxKVGESagPtB6wqCMYAtMNDe9Bl%2bolgM5D/89JSYSCqXgKeNkc6tjxPK/RJUHPeYK2rVL8O5b4ajATbXSW6KjkJzw0laqyAhxJnYWKa05b4ocuRXOaaoBvvLE6ajaDXywmoSmHjQR8D9dFuHPnvAdjix7GxQozRKEyIjxd0Oh2D6PV6xeYVYE1IB28j0HUIfBXs9WC1c2ySxMdV8SLd3bt3OjbIYBARuN%2bSRgJElhAWYCKCr2aBO60J1TwBk52FQwgLvllFFeCOjOwJOwMVkAltXhUXFxlpNIb7BB3HggZhfh%2bAfUBA8MubCxN2I2gbXxpELW8fwUpcL6ZRUfSexXIPdtveHj1m9DIaa8zJyWNRAWawBsGPhn6FafAkC1xZChIYJHcEbHzNBQnKHqGaBGD9v0n79qW0tJTCRxvDwmZEG40rUnS6egT9EdgINiDwLeAbUKME710fSAhRgpeXgAqqAMHKz08lSQ%2b7BolYBj3/V622X7jJ1N%2bo06UhWAurAp3HHgaY/YQ3QB4suWpN5Nfqan9Uo3l8fwNw%2b1QCJUTjBrA1Z8PCSKTJRFL4js86Ad8ERa7/n8OecV%2b7Nu0XSOp%2bIkKLuGZafihowbg/hN8apbTTMSQktEs2ub7d7vaVkCTsEFKFzwVjxsEIM6ogxpMEMXQrgJU70332COmFR4fcXHdhedvEYzm3kn4QqHm/tJnPkUyhWgn2hlS5bz91oFvu8VtHKJNf/jxyt/iUgSbsFeQdQl8vSPr6EK2AvCPxcgX0%2b1YYtefKDtpy52rbxVtnb/9Br9BFJ8u/ZmMnrjVImBeaCRi6z3NyG/idkJ/9cwytPJFJz7eekiuh%2blTFITZ2%2bvoxJGBQaCYAu7y8uNMOaBORjMOD9grHnz084KfxP5rOGeoF%2bdeKzENRYtL3IdwJsg5FdzrWePNkaLdBpb2xw076Qf/v8Y4GM/HpFiHaBve1a34a9Jz89vmfEhW7S7qkSx6Z/A165lLfZ5PKUQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"}},sdWu:function(n,s,a){},so9u:function(n,s,a){"use strict";var t=a("ujqu");a.n(t).a},suUz:function(n,s,a){"use strict";a("Oi2N");var t=a("KHd+"),p=Object(t.a)({},(function(){var n=this.$createElement,s=this._self._c||n;return s("Card",{staticClass:"newsletter",attrs:{id:"mc_embed_signup"}},[s("p",{staticClass:"mb-half"},[s("strong",[this._v("👋 Stay in the loop.")]),this._v(" Subscribe to Rchain newsletter!\n  ")]),s("form",{staticClass:"newsletter__form validate",attrs:{action:".",method:"post",id:"mc-embedded-subscribe-form",name:"mc-embedded-subscribe-form",target:"_blank",novalidate:""}},[s("div",{staticClass:"flex",attrs:{id:"mc_embed_signup_scroll"}},[s("div",{staticClass:"newsletter__field mc-field-group flex-fit",staticStyle:{"margin-right":"15px"}},[s("input",{staticClass:"required email",attrs:{type:"email","aria-label":"Email",placeholder:"your@email.com",value:"",name:"EMAIL",id:"mce-EMAIL"}})]),s("div",{staticClass:"newsletter__button"},[s("button",{staticClass:"button primary",attrs:{type:"submit",value:"Subscribe",name:"subscribe",id:"mc-embedded-subscribe"}},[this._v("Subscribe")])]),s("div",{staticClass:"clear",attrs:{id:"mce-responses"}},[s("div",{staticClass:"response",staticStyle:{display:"none"},attrs:{id:"mce-error-response"}}),s("div",{staticClass:"response",staticStyle:{display:"none"},attrs:{id:"mce-success-response"}})]),s("div",{staticStyle:{position:"absolute",left:"-5000px"},attrs:{"aria-hidden":"true"}},[s("input",{attrs:{type:"text",name:"b_960a357f3405a688ff935a10e_42bbd30818",tabindex:"-1",value:""}})])])]),s("div",{staticClass:"newsletter__top"})])}),[],!1,null,null,null);s.a=p.exports},tcbV:function(n,s,a){},ujqu:function(n,s,a){}}]);